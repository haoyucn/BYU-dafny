using System.Collections.Generic;
using System.Numerics;
using Microsoft.Boogie;
using System.IO;
using System.Text;
using System.Linq;


/* This file (Parser.cs) is generated from Dafny.atg by the Coco/R
 * parser generator. Do not edit this file directly. Instead, make
 * changes to Dafny.atg and then rebuild using the Makefile found
 * in the same directory as Dafny.atg.
 */

using System;
using System.Diagnostics.Contracts;

namespace Microsoft.Dafny {



public class Parser {
	public const int _EOF = 0;
	public const int _ident = 1;
	public const int _digits = 2;
	public const int _hexdigits = 3;
	public const int _decimaldigits = 4;
	public const int _arrayToken = 5;
	public const int _bvToken = 6;
	public const int _bool = 7;
	public const int _char = 8;
	public const int _int = 9;
	public const int _nat = 10;
	public const int _real = 11;
	public const int _ORDINAL = 12;
	public const int _object = 13;
	public const int _object_q = 14;
	public const int _string = 15;
	public const int _set = 16;
	public const int _iset = 17;
	public const int _multiset = 18;
	public const int _seq = 19;
	public const int _map = 20;
	public const int _imap = 21;
	public const int _charToken = 22;
	public const int _stringToken = 23;
	public const int _colon = 24;
	public const int _comma = 25;
	public const int _verticalbar = 26;
	public const int _doublecolon = 27;
	public const int _gets = 28;
	public const int _boredSmiley = 29;
	public const int _bullet = 30;
	public const int _dot = 31;
	public const int _backtick = 32;
	public const int _semicolon = 33;
	public const int _darrow = 34;
	public const int _assume = 35;
	public const int _assert = 36;
	public const int _calc = 37;
	public const int _case = 38;
	public const int _then = 39;
	public const int _else = 40;
	public const int _as = 41;
	public const int _is = 42;
	public const int _by = 43;
	public const int _in = 44;
	public const int _decreases = 45;
	public const int _invariant = 46;
	public const int _function = 47;
	public const int _predicate = 48;
	public const int _least = 49;
	public const int _greatest = 50;
	public const int _inductive = 51;
	public const int _twostate = 52;
	public const int _copredicate = 53;
	public const int _lemma = 54;
	public const int _static = 55;
	public const int _import = 56;
	public const int _export = 57;
	public const int _class = 58;
	public const int _trait = 59;
	public const int _datatype = 60;
	public const int _codatatype = 61;
	public const int _var = 62;
	public const int _const = 63;
	public const int _newtype = 64;
	public const int _type = 65;
	public const int _iterator = 66;
	public const int _method = 67;
	public const int _colemma = 68;
	public const int _constructor = 69;
	public const int _modifies = 70;
	public const int _reads = 71;
	public const int _requires = 72;
	public const int _ensures = 73;
	public const int _ghost = 74;
	public const int _witness = 75;
	public const int _lbracecolon = 76;
	public const int _lbrace = 77;
	public const int _rbrace = 78;
	public const int _lbracket = 79;
	public const int _rbracket = 80;
	public const int _openparen = 81;
	public const int _closeparen = 82;
	public const int _openAngleBracket = 83;
	public const int _closeAngleBracket = 84;
	public const int _singleeq = 85;
	public const int _eq = 86;
	public const int _neq = 87;
	public const int _neqAlt = 88;
	public const int _star = 89;
	public const int _at = 90;
	public const int _notIn = 91;
	public const int _ellipsis = 92;
	public const int _reveal = 93;
	public const int _expect = 94;
	public const int _sarrow = 95;
	public const int _qarrow = 96;
	public const int _larrow = 97;
	public const int maxT = 158;

  const bool _T = true;
  const bool _x = false;
  const int minErrDist = 2;

  public Scanner scanner;
  public Errors  errors;

  public IToken t;    // last recognized token
  public IToken la;   // lookahead token
  int errDist = minErrDist;

readonly Expression/*!*/ dummyExpr;
readonly AssignmentRhs/*!*/ dummyRhs;
readonly FrameExpression/*!*/ dummyFrameExpr;
readonly Statement/*!*/ dummyStmt;
readonly Statement/*!*/ dummyIfStmt;
readonly Include theInclude;
readonly ModuleDecl theModule;
readonly BuiltIns theBuiltIns;
readonly bool theVerifyThisFile;
readonly bool theCompileThisFile;
int anonymousIds = 0;

/// <summary>
/// Holds the modifiers given for a declaration
///
/// Not all modifiers are applicable to all kinds of declarations.
/// Errors are given when a modify does not apply.
/// We also record the tokens for the specified modifiers so that
/// they can be used in error messages.
/// </summary>
struct DeclModifierData {
  public bool IsAbstract;
  public IToken AbstractToken;
  public bool IsGhost;
  public IToken GhostToken;
  public bool IsStatic;
  public IToken StaticToken;
}

// Check that token has not been set, then set it.
public void CheckAndSetToken(ref IToken token)
{
    if (token != null) {
      SemErr(t, "Duplicate declaration modifier: " + t.val);
    }
    token = t;
}

/// <summary>
// A flags type used to tell what declaration modifiers are allowed for a declaration.
/// </summary>
[Flags]
enum AllowedDeclModifiers {
  None = 0,
  Abstract = 1,
  Ghost = 2,

  // Means ghost not allowed because already implicitly ghost.
  AlreadyGhost = 4,
  Static = 8,
};

/// <summary>
/// Check the declaration modifiers against those that are allowed.
///
/// The 'allowed' parameter specifies which declaration modifiers are allowed.
/// The 'declCaption' parameter should be a string describing the kind of declaration.
/// It is used in error messages.
/// Any declaration modifiers that are present but not allowed are cleared.
///</summary>
void CheckDeclModifiers(DeclModifierData dmod, string declCaption, AllowedDeclModifiers allowed)
{
  declCaption = (declCaption.StartsWith("i") || declCaption.StartsWith("o") ? "an " : "a ") + declCaption;
  if (dmod.IsAbstract && ((allowed & AllowedDeclModifiers.Abstract) == 0)) {
    SemErr(dmod.AbstractToken, $"{declCaption} cannot be declared 'abstract'.");
    dmod.IsAbstract = false;
  }
  if (dmod.IsGhost) {
    if ((allowed & AllowedDeclModifiers.AlreadyGhost) != 0) {
      SemErr(dmod.GhostToken, $"{declCaption} cannot be declared ghost (they are 'ghost' by default).");
      dmod.IsGhost = false;
    } else if ((allowed & AllowedDeclModifiers.Ghost) == 0) {
      SemErr(dmod.GhostToken, $"{declCaption} cannot be declared 'ghost'.");
      dmod.IsGhost = false;
    }
  }
  if (dmod.IsStatic && ((allowed & AllowedDeclModifiers.Static) == 0)) {
    SemErr(dmod.StaticToken, $"{declCaption} cannot be declared 'static'.");
    dmod.IsStatic = false;
  }
}

bool IsAssumeTypeKeyword(IToken la) {
  return la.kind == _assume || la.kind == _assert || la.kind == _expect;
}

///<summary>
/// Parses top-level things (modules, classes, datatypes, class members) from "filename"
/// and appends them in appropriate form to "module".
/// Returns the number of parsing errors encountered.
/// Note: first initialize the Scanner.
///</summary>
public static int Parse (bool useStdin, string/*!*/ filename, Include include, ModuleDecl module, BuiltIns builtIns, Errors/*!*/ errors, bool verifyThisFile=true, bool compileThisFile=true) /* throws System.IO.IOException */ {
  Contract.Requires(filename != null);
  Contract.Requires(module != null);
  string s;
  if (useStdin) {
    s = Microsoft.Boogie.ParserHelper.Fill(System.Console.In, new List<string>());
    return Parse(s, filename, filename, include, module, builtIns, errors, verifyThisFile, compileThisFile);
  } else {
    using (System.IO.StreamReader reader = new System.IO.StreamReader(filename)) {
      s = Microsoft.Boogie.ParserHelper.Fill(reader, new List<string>());
      return Parse(s, filename, DafnyOptions.Clo.UseBaseNameForFileName ? Path.GetFileName(filename) : filename, include, module, builtIns, errors, verifyThisFile, compileThisFile);
    }
  }
}
///<summary>
/// Parses top-level things (modules, classes, datatypes, class members)
/// and appends them in appropriate form to "module".
/// Returns the number of parsing errors encountered.
/// Note: first initialize the Scanner.
///</summary>
public static int Parse (string/*!*/ s, string/*!*/ fullFilename, string/*!*/ filename, ModuleDecl module, BuiltIns builtIns, ErrorReporter reporter, bool verifyThisFile=true, bool compileThisFile=true) {
  Contract.Requires(s != null);
  Contract.Requires(filename != null);
  Contract.Requires(module != null);
  Errors errors = new Errors(reporter);
  return Parse(s, fullFilename, filename, null, module, builtIns, errors, verifyThisFile, compileThisFile);
}

public static Parser SetupParser(string/*!*/ s, string/*!*/ fullFilename, string/*!*/ filename, Include include, ModuleDecl module,
                                 BuiltIns builtIns, Errors/*!*/ errors, bool verifyThisFile=true, bool compileThisFile=true) {
  Contract.Requires(s != null);
  Contract.Requires(filename != null);
  Contract.Requires(module != null);
  Contract.Requires(errors != null);
  byte[]/*!*/ buffer = cce.NonNull( UTF8Encoding.Default.GetBytes(s));
  MemoryStream ms = new MemoryStream(buffer,false);
  Scanner scanner = new Scanner(ms, errors, fullFilename, filename);
  return new Parser(scanner, errors, include, module, builtIns, verifyThisFile, compileThisFile);
}

public static Expression ParseExpression(string/*!*/ s, string/*!*/ fullFilename, string/*!*/ filename, Include include, ModuleDecl module,
                                         BuiltIns builtIns, Errors/*!*/ errors, bool verifyThisFile=true, bool compileThisFile=true) {
  Parser parser = SetupParser(s, fullFilename, filename, include, module, builtIns, errors, verifyThisFile, compileThisFile);
  parser.la = new Token();
  parser.la.val = "";
  parser.Get();
  Expression e;
  parser.Expression(out e, true, true, true);
  return e;
}

///<summary>
/// Parses top-level things (modules, classes, datatypes, class members)
/// and appends them in appropriate form to "module".
/// Returns the number of parsing errors encountered.
/// Note: first initialize the Scanner with the given Errors sink.
///</summary>
public static int Parse (string/*!*/ s, string/*!*/ fullFilename, string/*!*/ filename, Include include, ModuleDecl module,
                         BuiltIns builtIns, Errors/*!*/ errors, bool verifyThisFile=true, bool compileThisFile=true) {
  Parser parser = SetupParser(s, fullFilename, filename, include, module, builtIns, errors, verifyThisFile, compileThisFile);
  parser.Parse();
  return parser.errors.ErrorCount;
}

public Parser(Scanner/*!*/ scanner, Errors/*!*/ errors, Include include, ModuleDecl module, BuiltIns builtIns, bool verifyThisFile=true, bool compileThisFile=true)
  : this(scanner, errors)  // the real work
{
  // initialize readonly fields
  dummyExpr = new LiteralExpr(Token.NoToken);
  dummyRhs = new ExprRhs(dummyExpr, null);
  dummyFrameExpr = new FrameExpression(dummyExpr.tok, dummyExpr, null);
  dummyStmt = new ReturnStmt(Token.NoToken, Token.NoToken, null);
  var dummyBlockStmt = new BlockStmt(Token.NoToken, Token.NoToken, new List<Statement>());
  dummyIfStmt = new IfStmt(Token.NoToken, Token.NoToken, false, null, dummyBlockStmt, null);
  theInclude = include; // the "include" that includes this file
  theModule = module;
  theBuiltIns = builtIns;
  theVerifyThisFile = verifyThisFile;
  theCompileThisFile = compileThisFile;
}

bool IsIdentifier(int kind) {
  return kind == _ident || kind == _least || kind == _greatest;
}

bool IsLabel(bool allowLabel) {
  if (!allowLabel) {
    return false;
  }
  scanner.ResetPeek();
  IToken x = scanner.Peek();
  return (IsIdentifier(la.kind) || la.kind == _digits) && x.kind == _colon;
}

bool IsBinding() {
  scanner.ResetPeek();
  IToken x = scanner.Peek();
  return (IsIdentifier(la.kind) || la.kind == _digits) && x.kind == _gets;
}

bool IsAlternative() {
  IToken x = scanner.Peek();
  return (la.kind == _lbrace && x.kind == _case)
      || la.kind == _case;
}

bool FollowedByColon() {
  IToken x = la;
  while (IsIdentifier(x.kind) || x.kind == _openparen) {
    x = scanner.Peek();
  }
  return x.kind == _colon;
}

bool IsGets() {
  return la.kind == _gets;
}

bool IsVar() {
  scanner.ResetPeek();
  IToken x = scanner.Peek();
  return la.kind == _var || (x.kind == _var && la.kind == _ghost);
}

// an existential guard starts with an identifier and is then followed by
// * a colon (if the first identifier is given an explicit type),
// * a comma (if there's a list of bound variables and the first one is not given an explicit type),
// * a start-attribute (if there's one bound variable and it is not given an explicit type and there are attributes), or
// * a bored smiley (if there's one bound variable and it is not given an explicit type).
bool IsBindingGuard() {
  scanner.ResetPeek();
  if (IsIdentifier(la.kind)) {
    Token x = scanner.Peek();
    if (x.kind == _colon || x.kind == _comma || x.kind == _boredSmiley || x.kind == _lbracecolon) {
      return true;
    }
  }
  return false;
}

bool IsLoopSpec() {
  return la.kind == _invariant || la.kind == _decreases || la.kind == _modifies;
}

bool IsWitness() {
  scanner.ResetPeek();
  if (la.kind == _witness) {
    return true;
  } else if (la.kind == _ghost) {
    Token x = scanner.Peek();
    return x.kind == _witness;
  }
  return false;
}

bool IsFunctionDecl() {
  switch (la.kind) {
    case _function:
    case _predicate:
    case _copredicate:
      return true;
    case _least:
    case _greatest:
    case _inductive:
      return scanner.Peek().kind != _lemma;
    case _twostate:
      var x = scanner.Peek();
      return x.kind == _function || x.kind == _predicate;
    default:
      return false;
  }
}

bool IsParenStar() {
  scanner.ResetPeek();
  Token x = scanner.Peek();
  return la.kind == _openparen && x.kind == _star;
}

bool IsEquivOp() => IsEquivOp(la);
bool IsImpliesOp() => IsImpliesOp(la);
bool IsExpliesOp() => IsExpliesOp(la);
bool IsAndOp() => IsAndOp(la);
bool IsOrOp() => IsOrOp(la);
static bool IsEquivOp(IToken la) {
  return la.val == "<==>" || la.val == "\u21d4";
}
static bool IsImpliesOp(IToken la) {
  return la.val == "==>" || la.val == "\u21d2";
}
static bool IsExpliesOp(IToken la) {
  return la.val == "<==" || la.val == "\u21d0";
}
static bool IsAndOp(IToken la) {
  return la.val == "&&" || la.val == "\u2227";
}
static bool IsOrOp(IToken la) {
  return la.val == "||" || la.val == "\u2228";
}
bool IsBitwiseAndOp() {
  return la.val == "&";
}
bool IsBitwiseOrOp() {
  return la.val == "|";
}
bool IsBitwiseXorOp() {
  return la.val == "^";
}
bool IsBitwiseOp() {
  return IsBitwiseAndOp() || IsBitwiseOrOp() || IsBitwiseXorOp();
}
bool IsAsOrIs() {
  return la.kind == _as || la.kind == _is;
}
bool IsRelOp() {
  return la.val == "=="
      || la.val == "<"
      || la.val == ">"
      || la.val == "<="
      || la.val == ">="
      || la.val == "!="
      || la.val == "in"
      || la.kind == _notIn
      || la.val =="!"
      || la.val == "\u2260"
      || la.val == "\u2264"
      || la.val == "\u2265";
}
bool IsShiftOp() {
  if (la.kind == _openAngleBracket) {
  } else if (la.kind == _closeAngleBracket) {
  } else {
    return false;
  }
  scanner.ResetPeek();
  var x = scanner.Peek();
  if (x.kind != la.kind) {
    return false;
  }
  return x.pos == la.pos + 1;  // return true only if the tokens are adjacent to each other
}
bool IsAddOp() {
  return la.val == "+" || la.val == "-";
}
bool IsMulOp() {
  return la.kind == _star || la.val == "/" || la.val == "%";
}
bool IsQSep() {
  return la.kind == _doublecolon || la.kind == _bullet;
}

bool IsNonFinalColon() {
  return la.kind == _colon && scanner.Peek().kind != _rbracket;
}

bool IsMapDisplay() {
  scanner.ResetPeek();
  return (la.kind == _map || la.kind == _imap) && scanner.Peek().kind == _lbracket;
}

bool IsSetDisplay() {
  scanner.ResetPeek();
  if (la.kind == _lbrace) return true;
  int k = scanner.Peek().kind;
  if (la.kind == _iset && k == _lbrace) return true;
  if (la.kind == _multiset && (k == _lbrace || k == _openparen)) return true;
  return false;
}

bool IsSuffix() {
  return la.kind == _dot || la.kind == _lbracket || la.kind == _openparen;
}

string UnwildIdent(string x, bool allowWildcardId) {
  if (x.StartsWith("_")) {
    if (allowWildcardId && x.Length == 1) {
      return "_v" + anonymousIds++;
    } else {
      SemErr("cannot declare identifier beginning with underscore");
    }
  }
  return x;
}

bool IsLambda(bool allowLambda)
{
  if (!allowLambda) {
    return false;
  }
  scanner.ResetPeek();
  Token x;
  // peek at what might be a signature of a lambda expression
  if (IsIdentifier(la.kind)) {
    // cool, that's the entire candidate signature
  } else if (la.kind != _openparen) {
    return false;  // this is not a lambda expression
  } else {
    int identCount = 0;
    x = scanner.Peek();
    while (x.kind != _closeparen) {
      if (identCount != 0) {
        if (x.kind != _comma) {
          return false;  // not the signature of a lambda
        }
        x = scanner.Peek();
      }
      if (!IsIdentifier(x.kind)) {
        return false;  // not a lambda expression
      }
      identCount++;
      x = scanner.Peek();
      if (x.kind == _colon) {
        // a colon belongs only in a lamdba signature, so this must be a lambda (or something ill-formed)
        return true;
      }
    }
  }
  // What we have seen so far could have been a lambda signature or could have been some
  // other expression (in particular, an identifier, a parenthesized identifier, or a
  // tuple all of whose subexpressions are identifiers).
  // It is a lambda expression if what follows is something that must be a lambda.
  x = scanner.Peek();
  return x.kind == _darrow || x.kind == _reads || x.kind == _requires;
}

bool IsIdentParen() {
  scanner.ResetPeek();
  Token x = scanner.Peek();
  return IsIdentifier(la.kind) && x.kind == _openparen;
}

/* Used to disambiguate the LHS of a VarDeclStmt. If it looks like the start of a CasePattern,
 * we consider it to be a VarDeclPattern. But if we are looking at a simple identifier, then we
 * consider it to be a VarDeclStmt.
 */
bool IsPatternDecl() {
  return IsIdentParen() || la.kind == _openparen;
}

bool IsIdentColonOrBar() {
  Token x = scanner.Peek();
  return IsIdentifier(la.kind) && (x.kind == _colon || x.kind == _verticalbar);
}

bool SemiFollowsCall(bool allowLemma, Expression e) {
  return allowLemma && la.kind == _semicolon && e is ApplySuffix;
}

bool IsNotEndOfCase() {
  return la.kind != _EOF && la.kind != _rbrace && la.kind != _case;
}

/* The following is the largest lookahead there is. It needs to check if what follows
 * can be nothing but "<" Type { "," Type } ">".
 * If inExpressionContext == false and there is an opening '<', then
 * it is assumed, without checking, that what follows is a type parameter list
 */
bool IsGenericInstantiation(bool inExpressionContext) {
  scanner.ResetPeek();
  if (!inExpressionContext) {
    return la.kind == _openAngleBracket;
  }
  IToken pt = la;
  if (!IsTypeList(ref pt)) {
    return false;
  }
  /* There are ambiguities in the parsing.  For example:
   *     F( a < b , c > (d) )
   * can either be a unary function F whose argument is a function "a" with type arguments "<b,c>" and
   * parameter "d", or can be a binary function F with the two boolean arguments "a < b" and "c > (d)".
   * To make the situation a little better, we (somewhat heuristically) look at the character that
   * follows the ">".  Note that if we, contrary to a user's intentions, pick "a<b,c>" out as a function
   * with a type instantiation, the user can disambiguate it by making sure the ">" sits inside some
   * parentheses, like:
   *     F( a < b , (c > (d)) )
   */
  // In the following cases, we're sure we must have read a type instantiation that just ended an expression
  if (IsEquivOp(pt) || IsImpliesOp(pt) || IsExpliesOp(pt) || IsAndOp(pt) || IsOrOp(pt)) {
    return true;
  }
  switch (pt.kind) {
    case _dot:  // here, we're sure it must have been a type instantiation we saw, because an expression cannot begin with dot
    case _openparen:  // it was probably a type instantiation of a function/method
    case _lbracket:  // it is possible that it was a type instantiation
    case _lbrace:  // it was probably a type instantiation of a function/method
    case _at:
    // In the following cases, we're sure we must have read a type instantiation that just ended an expression
    case _closeparen:
    case _rbracket:
    case _rbrace:
    case _comma:
    case _semicolon:
    case _then:
    case _else:
    case _case:
    case _eq:
    case _neq:
    case _neqAlt:
    case _as:
    case _is:
    case _darrow:
    case _by:
    case _in:
    case _openAngleBracket:
    case _closeAngleBracket:
    case _EOF:
    // (specification clauses that can follow an expression)
    case _decreases:
    case _modifies:
    case _reads:
    case _requires:
    case _ensures:
    case _invariant:
    case _witness:
    // (top-level declarations that can follow an expression)
    case _function:
    case _predicate:
    case _least:
    case _greatest:
    case _inductive:
    case _twostate:
    case _lemma:
    case _copredicate:
    case _ghost:
    case _static:
    case _import:
    case _export:
    case _class:
    case _trait:
    case _datatype:
    case _codatatype:
    case _var:
    case _const:
    case _newtype:
    case _type:
    case _iterator:
    case _method:
    case _colemma:
    case _constructor:
      return true;
    default:
      return false;
  }
}
/* Returns true if the next thing is of the form:
 *     "<" Type { "," Type } ">"
 */
bool IsTypeList(ref IToken pt) {
  if (pt.kind != _openAngleBracket) {
    return false;
  }
  pt = scanner.Peek();
  return IsTypeSequence(ref pt, _closeAngleBracket);
}
/* Returns true if the next thing is of the form:
 *     [ "ghost" ] Type { "," [ "ghost" ] Type }
 * followed by an endBracketKind.
 */
bool IsTypeSequence(ref IToken pt, int endBracketKind) {
  while (true) {
    if (pt.kind == _ghost) {
      pt = scanner.Peek();
    }
    if (!IsType(ref pt)) {
      return false;
    }
    if (pt.kind == endBracketKind) {
      // end of type list
      pt = scanner.Peek();
      return true;
    } else if (pt.kind == _comma) {
      // type list continues
      pt = scanner.Peek();
    } else {
      // not a type list
      return false;
    }
  }
}

bool IsType(ref IToken pt) {
  if (!IsNonArrowType(ref pt)) return false;
  while (pt.kind == _sarrow || pt.kind == _qarrow || pt.kind == _larrow) {
    pt = scanner.Peek();
    if (!IsNonArrowType(ref pt)) return false;
  }
  return true;
}

bool IsNonArrowType(ref IToken pt) {
  switch (pt.kind) {
    case _bool:
    case _char:
    case _nat:
    case _int:
    case _real:
    case _ORDINAL:
    case _string:
    case _object_q:
    case _object:
      pt = scanner.Peek();
      return true;
    case _arrayToken:
    case _bvToken:
    case _set:
    case _iset:
    case _multiset:
    case _seq:
    case _map:
    case _imap:
      pt = scanner.Peek();
      return pt.kind != _openAngleBracket || IsTypeList(ref pt);
    case _ident:
    case _least:
    case _greatest:
      while (true) {
        // invariant: next token is an identifier (_ident, _least, or _greatest)
        pt = scanner.Peek();
        if (pt.kind == _openAngleBracket && !IsTypeList(ref pt)) {
          return false;
        }
        if (pt.kind != _dot) {
          // end of the type
          return true;
        }
        pt = scanner.Peek();  // get the _dot
        if (!IsIdentifier(pt.kind)) {
          return false;
        }
      }
    case _openparen:
      pt = scanner.Peek();
      if (pt.kind == _closeparen) {
        // end of type list
        pt = scanner.Peek();
        return true;
      }
      return IsTypeSequence(ref pt, _closeparen);
    default:
      return false;
  }
}


void ConvertKeywordTokenToIdent() {
  var oldKind = la.kind;
  la.kind = _ident;

  // call CheckLiteral with la
  var origT = t;
  t = la;
  scanner.CheckLiteral();
  t = origT;

  if (la.kind != _ident) {
    // it has been changed by CheckLiteral, which means it was a keyword
    la.kind = _ident;  // convert it to an ident
  } else {
    // la was something other than a keyword
    la.kind = oldKind;
  }
}

int StringToInt(string s, int defaultValue, string errString) {
  Contract.Requires(s != null);
  Contract.Requires(errString != null);
  try {
    if (s != "") {
      defaultValue = int.Parse(s);
    }
  } catch (System.OverflowException) {
    SemErr(string.Format("sorry, {0} ({1}) are not supported", errString, s));
  }
  return defaultValue;
}

/*--------------------------------------------------------------------------*/


  public Parser(Scanner scanner, Errors errors) {
    this.scanner = scanner;
    this.errors = errors;
    Token tok = new Token();
    tok.val = "";
    this.la = tok;
    this.t = new Token(); // just to satisfy its non-null constraint
  }

  void SynErr (int n) {
    if (errDist >= minErrDist) errors.SynErr(la.filename, la.line, la.col, n);
    errDist = 0;
  }

  public void SemErr (string msg) {
    Contract.Requires(msg != null);
    if (errDist >= minErrDist) errors.SemErr(t, msg);
    errDist = 0;
  }

  public void SemErr(IToken tok, string msg) {
    Contract.Requires(tok != null);
    Contract.Requires(msg != null);
    errors.SemErr(tok, msg);
  }

  void Get () {
    for (;;) {
      t = theVerifyThisFile ? la : new IncludeToken(theInclude, la);
      la = scanner.Scan();
      if (la.kind <= maxT) { ++errDist; break; }

      la = t;
    }
  }

  void Expect (int n) {
    if (la.kind==n) Get(); else { SynErr(n); }
  }

  bool StartOf (int s) {
    return set[s, la.kind];
  }

  void ExpectWeak (int n, int follow) {
    if (la.kind == n) Get();
    else {
      SynErr(n);
      while (!StartOf(follow)) Get();
    }
  }


  bool WeakSeparator(int n, int syFol, int repFol) {
    int kind = la.kind;
    if (kind == n) {Get(); return true;}
    else if (StartOf(repFol)) {return false;}
    else {
      SynErr(n);
      while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
        Get();
        kind = la.kind;
      }
      return StartOf(syFol);
    }
  }


	void Dafny() {
		List<MemberDecl/*!*/> membersDefaultClass = new List<MemberDecl/*!*/>();
		// to support multiple files, create a default module only if theModule is null
		DefaultModuleDecl defaultModule = (DefaultModuleDecl)((LiteralModuleDecl)theModule).ModuleDef;
		// theModule should be a DefaultModuleDecl (actually, the singular DefaultModuleDecl)
		Contract.Assert(defaultModule != null);
		
		while (la.kind == 98) {
			Get();
			Expect(23);
			{
			 string parsedFile = scanner.FullFilename;
			 bool isVerbatimString;
			 string includedFile = Util.RemoveParsedStringQuotes(t.val, out isVerbatimString);
			 includedFile = Util.RemoveEscaping(includedFile, isVerbatimString);
			 if (!Path.IsPathRooted(includedFile)) {
			   string basePath = Path.GetDirectoryName(parsedFile);
			   includedFile = Path.Combine(basePath, includedFile);
			 }
			 defaultModule.Includes.Add(new Include(t, parsedFile, includedFile));
			}
			
		}
		while (StartOf(1)) {
			TopDecl(defaultModule, membersDefaultClass, /* isTopLevel */ true, /* isAbstract */ false);
		}
		if (membersDefaultClass.Count == 0 && defaultModule.Includes.Count == 0 && defaultModule.TopLevelDecls.Count == 0) {
		 errors.Warning(defaultModule.tok, "File contains no code: " + Path.GetRelativePath(Directory.GetCurrentDirectory(), scanner.FullFilename));
		}
		 DefaultClassDecl defaultClass = null;
		 foreach (TopLevelDecl topleveldecl in defaultModule.TopLevelDecls) {
		   defaultClass = topleveldecl as DefaultClassDecl;
		   if (defaultClass != null) {
		     defaultClass.Members.AddRange(membersDefaultClass);
		     break;
		   }
		 }
		 if (defaultClass == null) { // create the default class here, because it wasn't found
		   defaultClass = new DefaultClassDecl(defaultModule, membersDefaultClass);
		   defaultModule.TopLevelDecls.Add(defaultClass);
		 } 
		while (!(la.kind == 0)) {SynErr(159); Get();}
		Expect(0);
	}

	void TopDecl(ModuleDefinition module, List<MemberDecl/*!*/> membersDefaultClass, bool isTopLevel, bool isAbstract ) {
		DeclModifierData dmod = new DeclModifierData(); ModuleDecl submodule;
		DatatypeDecl/*!*/ dt; TopLevelDecl td; IteratorDecl iter;
		TraitDecl/*!*/ trait;
		
		while (StartOf(2)) {
			DeclModifier(ref dmod);
		}
		switch (la.kind) {
		case 56: case 57: case 101: {
			SubModuleDecl(dmod, module, out submodule, isTopLevel);
			var litmod = submodule as LiteralModuleDecl;
			if (litmod != null && litmod.ModuleDef.PrefixIds.Count != 0) {
			 var tup = new Tuple<List<IToken>, LiteralModuleDecl>(litmod.ModuleDef.PrefixIds, litmod);
			 module.PrefixNamedModules.Add(tup);
			} else {
			 module.TopLevelDecls.Add(submodule);
			}
			
			break;
		}
		case 58: {
			ClassDecl(dmod, module, out td);
			module.TopLevelDecls.Add(td); 
			break;
		}
		case 60: case 61: {
			DatatypeDecl(dmod, module, out dt);
			module.TopLevelDecls.Add(dt); 
			break;
		}
		case 64: {
			NewtypeDecl(dmod, module, out td);
			module.TopLevelDecls.Add(td); 
			break;
		}
		case 65: {
			SynonymTypeDecl(dmod, module, out td);
			module.TopLevelDecls.Add(td); 
			break;
		}
		case 66: {
			IteratorDecl(dmod, module, out iter);
			module.TopLevelDecls.Add(iter); 
			break;
		}
		case 59: {
			TraitDecl(dmod, module, out trait);
			module.TopLevelDecls.Add(trait); 
			break;
		}
		case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 62: case 63: case 67: case 68: case 69: {
			ClassMemberDecl(dmod, membersDefaultClass, false, true, !DafnyOptions.O.AllowGlobals);
			break;
		}
		default: SynErr(160); break;
		}
	}

	void DeclModifier(ref DeclModifierData dmod) {
		if (la.kind == 99) {
			Get();
			dmod.IsAbstract = true;  CheckAndSetToken(ref dmod.AbstractToken); 
		} else if (la.kind == 74) {
			Get();
			dmod.IsGhost = true;  CheckAndSetToken(ref dmod.GhostToken); 
		} else if (la.kind == 55) {
			Get();
			dmod.IsStatic = true; CheckAndSetToken(ref dmod.StaticToken); 
		} else if (la.kind == 100) {
			Get();
			errors.Deprecated(t,
			 "the 'protected' modifier is no longer supported; " +
			 "to restrict access from outside the module, use a 'provides' clause in the module's export set; " +
			 "if you're trying to add conjuncts to a predicate in a refinement module, see " +
			 "Test/dafny3/CachedContainer.dfy, Test/dafny2/StoreAndRetrieve.dfy, and Test/dafny2/MonotonicHeapstate.dfy " +
			 "in the Dafny test suite on github");
			
		} else SynErr(161);
	}

	void SubModuleDecl(DeclModifierData dmod, ModuleDefinition parent, out ModuleDecl submodule, bool isTopLevel) {
		submodule = null; 
		if (la.kind == 101) {
			ModuleDefinition(dmod, parent, out submodule);
		} else if (la.kind == 56) {
			ModuleImport(parent, out submodule);
		} else if (la.kind == 57) {
			ModuleExport(parent, out submodule);
			if (isTopLevel) SemErr(submodule.tok, "There is no point to an export declaration at the top level");
			
		} else SynErr(162);
	}

	void ClassDecl(DeclModifierData dmodClass, ModuleDefinition/*!*/ module, out TopLevelDecl/*!*/ c) {
		Contract.Requires(module != null);
		Contract.Ensures(Contract.ValueAtReturn(out c) != null);
		IToken/*!*/ id;
		Type parentTrait;
		List<Type> parentTraits = new List<Type>();
		Attributes attrs = null;
		bool isRefining = false;
		List<TypeParameter> typeArgs = new List<TypeParameter>();
		List<MemberDecl> members = new List<MemberDecl>();
		IToken bodyStart;
		CheckDeclModifiers(dmodClass, "class", AllowedDeclModifiers.None);
		DeclModifierData dmod;
		
		while (!(la.kind == 0 || la.kind == 58)) {SynErr(163); Get();}
		Expect(58);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		ClassName(out id);
		if (la.kind == 83) {
			GenericParameters(typeArgs, true);
		}
		if (la.kind == 92 || la.kind == 106) {
			if (la.kind == 106) {
				Get();
				Type(out parentTrait);
				parentTraits.Add(parentTrait); 
				while (la.kind == 25) {
					Get();
					Type(out parentTrait);
					parentTraits.Add(parentTrait); 
				}
			} else {
				Get();
				isRefining = true; 
			}
		}
		while (!(la.kind == 0 || la.kind == 77)) {SynErr(164); Get();}
		Expect(77);
		bodyStart = t;  
		while (StartOf(3)) {
			dmod = new DeclModifierData(); 
			while (StartOf(2)) {
				DeclModifier(ref dmod);
			}
			ClassMemberDecl(dmod, members, true, false, false);
		}
		Expect(78);
		c = new ClassDecl(id, id.val, module, typeArgs, members, attrs, isRefining, parentTraits);
		c.BodyStartTok = bodyStart;
		c.BodyEndTok = t;
		
	}

	void DatatypeDecl(DeclModifierData dmod, ModuleDefinition/*!*/ module, out DatatypeDecl/*!*/ dt) {
		Contract.Requires(module != null);
		Contract.Ensures(Contract.ValueAtReturn(out dt)!=null);
		IToken/*!*/ id;
		Attributes attrs = null;
		List<TypeParameter/*!*/> typeArgs = new List<TypeParameter/*!*/>();
		List<DatatypeCtor/*!*/> ctors = new List<DatatypeCtor/*!*/>();
		IToken bodyStart = Token.NoToken;  // dummy assignment
		bool isRefining = false;
		bool co = false;
		CheckDeclModifiers(dmod, "datatype or codatatype", AllowedDeclModifiers.None);
		var members = new List<MemberDecl>();
		
		while (!(la.kind == 0 || la.kind == 60 || la.kind == 61)) {SynErr(165); Get();}
		if (la.kind == 60) {
			Get();
		} else if (la.kind == 61) {
			Get();
			co = true; 
		} else SynErr(166);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		DatatypeName(out id);
		if (la.kind == 83) {
			GenericParameters(typeArgs, true);
		}
		Expect(85);
		bodyStart = t; 
		if (la.kind == 92) {
			Get();
			isRefining = true; 
		}
		if (la.kind == 26) {
			Get();
		}
		DatatypeMemberDecl(ctors);
		while (la.kind == 26) {
			Get();
			DatatypeMemberDecl(ctors);
		}
		if (la.kind == 77) {
			TypeMembers(module, members);
		}
		if (co) {
		 dt = new CoDatatypeDecl(id, id.val, module, typeArgs, ctors, members, attrs, isRefining);
		} else {
		 dt = new IndDatatypeDecl(id, id.val, module, typeArgs, ctors, members, attrs, isRefining);
		}
		dt.BodyStartTok = bodyStart;
		dt.BodyEndTok = t;
		
	}

	void NewtypeDecl(DeclModifierData dmod, ModuleDefinition module, out TopLevelDecl td) {
		IToken id, bvId;
		Attributes attrs = null;
		td = null;
		Type baseType = null;
		Expression constraint;
		Expression witness = null;
		bool isRefining = false;
		CheckDeclModifiers(dmod, "newtype", AllowedDeclModifiers.None);
		var members = new List<MemberDecl>();
		
		Expect(64);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		NewtypeName(out id);
		Expect(85);
		if (la.kind == 92) {
			Get();
			isRefining = true; 
		}
		if (IsIdentColonOrBar()) {
			LocalVarName(out bvId);
			if (la.kind == 24) {
				Get();
				Type(out baseType);
			}
			if (baseType == null) { baseType = new InferredTypeProxy(); } 
			Expect(26);
			Expression(out constraint, false, true);
			var witnessKind = SubsetTypeDecl.WKind.CompiledZero; 
			if (IsWitness()) {
				if (la.kind == 74) {
					Get();
					Expect(75);
					witnessKind = SubsetTypeDecl.WKind.Ghost; 
					Expression(out witness, false, true);
				} else if (la.kind == 75) {
					Get();
					if (la.kind == 89) {
						Get();
						witnessKind = SubsetTypeDecl.WKind.OptOut; 
					} else if (StartOf(4)) {
						Expression(out witness, false, true);
						witnessKind = SubsetTypeDecl.WKind.Compiled; 
					} else SynErr(167);
				} else SynErr(168);
			}
			if (la.kind == 77) {
				TypeMembers(module, members);
			}
			td = new NewtypeDecl(id, id.val, module, new BoundVar(bvId, bvId.val, baseType), constraint, witnessKind, witness, members, attrs, isRefining);
			
		} else if (StartOf(5)) {
			Type(out baseType);
			if (la.kind == 77) {
				TypeMembers(module, members);
			}
			td = new NewtypeDecl(id, id.val, module, baseType, members, attrs, isRefining); 
		} else SynErr(169);
	}

	void SynonymTypeDecl(DeclModifierData dmod, ModuleDefinition module, out TopLevelDecl td) {
		IToken id, bvId;
		Attributes attrs = null;
		var characteristics = new TypeParameter.TypeParameterCharacteristics(false);
		var typeArgs = new List<TypeParameter>();
		td = null;
		Type ty = null;
		Expression constraint;
		Expression witness = null;
		var kind = "opaque type";
		var members = new List<MemberDecl>();
		var isRefining = false;
		
		Expect(65);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		SynonymTypeName(out id);
		while (la.kind == 81) {
			TypeParameterCharacteristics(ref characteristics);
		}
		if (la.kind == 83) {
			GenericParameters(typeArgs, true);
		}
		if (la.kind == 77 || la.kind == 85 || la.kind == 92) {
			if (la.kind == 85) {
				Get();
				if (IsIdentColonOrBar()) {
					LocalVarName(out bvId);
					if (la.kind == 24) {
						Get();
						Type(out ty);
					}
					if (ty == null) { ty = new InferredTypeProxy(); } 
					Expect(26);
					Expression(out constraint, false, true);
					var witnessKind = SubsetTypeDecl.WKind.CompiledZero; 
					if (IsWitness()) {
						if (la.kind == 74) {
							Get();
							Expect(75);
							witnessKind = SubsetTypeDecl.WKind.Ghost; 
							Expression(out witness, false, true);
						} else if (la.kind == 75) {
							Get();
							if (la.kind == 89) {
								Get();
								witnessKind = SubsetTypeDecl.WKind.OptOut; 
							} else if (StartOf(4)) {
								Expression(out witness, false, true);
								witnessKind = SubsetTypeDecl.WKind.Compiled; 
							} else SynErr(170);
						} else SynErr(171);
					}
					td = new SubsetTypeDecl(id, id.val, characteristics, typeArgs, module, new BoundVar(bvId, bvId.val, ty), constraint, witnessKind, witness, attrs);
					kind = "subset type";
					
				} else if (StartOf(5)) {
					Type(out ty);
					td = new TypeSynonymDecl(id, id.val, characteristics, typeArgs, module, ty, attrs);
					kind = "type synonym";
					
				} else SynErr(172);
			} else if (la.kind == 92) {
				Get();
				isRefining = true; 
				if (la.kind == 77) {
					TypeMembers(module, members);
				}
			} else {
				TypeMembers(module, members);
			}
		}
		if (td == null) {
		 if (module is DefaultModuleDecl) {
		   // opaque type declarations at the very outermost program scope get an automatic (!new)
		   characteristics.ContainsNoReferenceTypes = true;
		 }
		 td = new OpaqueTypeDecl(id, id.val, module, characteristics, typeArgs, members, attrs, isRefining);
		}
		
		CheckDeclModifiers(dmod, kind, AllowedDeclModifiers.None); 
	}

	void IteratorDecl(DeclModifierData dmod, ModuleDefinition module, out IteratorDecl/*!*/ iter) {
		Contract.Ensures(Contract.ValueAtReturn(out iter) != null);
		IToken/*!*/ id;
		Attributes attrs = null;
		List<TypeParameter/*!*/>/*!*/ typeArgs = new List<TypeParameter/*!*/>();
		List<Formal/*!*/> ins = new List<Formal/*!*/>();
		List<Formal/*!*/> outs = new List<Formal/*!*/>();
		List<FrameExpression/*!*/> reads = new List<FrameExpression/*!*/>();
		List<FrameExpression/*!*/> mod = new List<FrameExpression/*!*/>();
		List<Expression/*!*/> decreases = new List<Expression>();
		List<AttributedExpression/*!*/> req = new List<AttributedExpression/*!*/>();
		List<AttributedExpression/*!*/> ens = new List<AttributedExpression/*!*/>();
		List<AttributedExpression/*!*/> yieldReq = new List<AttributedExpression/*!*/>();
		List<AttributedExpression/*!*/> yieldEns = new List<AttributedExpression/*!*/>();
		List<Expression/*!*/> dec = new List<Expression/*!*/>();
		Attributes readsAttrs = null;
		Attributes modAttrs = null;
		Attributes decrAttrs = null;
		BlockStmt body = null;
		IToken signatureEllipsis = null;
		IToken bodyStart = Token.NoToken;
		IToken bodyEnd = Token.NoToken;
		CheckDeclModifiers(dmod, "iterator", AllowedDeclModifiers.None);
		
		while (!(la.kind == 0 || la.kind == 66)) {SynErr(173); Get();}
		Expect(66);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		IteratorName(out id);
		if (la.kind == 81 || la.kind == 83) {
			if (la.kind == 83) {
				GenericParameters(typeArgs, true);
			}
			Formals(true, true, false, ins);
			if (la.kind == 109 || la.kind == 110) {
				if (la.kind == 109) {
					Get();
				} else {
					Get();
					SemErr(t, "iterators don't have a 'returns' clause; did you mean 'yields'?"); 
				}
				Formals(false, true, false, outs);
			}
		} else if (la.kind == 92) {
			Get();
			signatureEllipsis = t; 
		} else SynErr(174);
		IteratorSpec(reads, mod, decreases, req, ens, yieldReq, yieldEns, ref readsAttrs, ref modAttrs, ref decrAttrs);
		if (la.kind == 77) {
			BlockStmt(out body, out bodyStart, out bodyEnd);
		}
		iter = new IteratorDecl(id, id.val, module, typeArgs, ins, outs,
		                       new Specification<FrameExpression>(reads, readsAttrs),
		                       new Specification<FrameExpression>(mod, modAttrs),
		                       new Specification<Expression>(decreases, decrAttrs),
		                       req, ens, yieldReq, yieldEns,
		                       body, attrs, signatureEllipsis);
		iter.BodyStartTok = bodyStart;
		iter.BodyEndTok = bodyEnd;
		
	}

	void TraitDecl(DeclModifierData dmodIn, ModuleDefinition/*!*/ module, out TraitDecl/*!*/ trait) {
		Contract.Requires(module != null);
		Contract.Ensures(Contract.ValueAtReturn(out trait) != null);
		CheckDeclModifiers(dmodIn, "trait", AllowedDeclModifiers.None);
		IToken/*!*/ id;
		Type parentTrait;
		List<Type> parentTraits = new List<Type>();
		Attributes attrs = null;
		bool isRefining = false;
		List<TypeParameter/*!*/> typeArgs = new List<TypeParameter/*!*/>(); //traits should not support type parameters at the moment
		List<MemberDecl/*!*/> members = new List<MemberDecl/*!*/>();
		IToken bodyStart;
		DeclModifierData dmod;
		
		while (!(la.kind == 0 || la.kind == 59)) {SynErr(175); Get();}
		Expect(59);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		ClassName(out id);
		if (la.kind == 83) {
			GenericParameters(typeArgs, true);
		}
		if (la.kind == 92 || la.kind == 106) {
			if (la.kind == 106) {
				Get();
				Type(out parentTrait);
				parentTraits.Add(parentTrait); 
				while (la.kind == 25) {
					Get();
					Type(out parentTrait);
					parentTraits.Add(parentTrait); 
				}
			} else {
				Get();
				isRefining = true; 
			}
		}
		Expect(77);
		bodyStart = t; 
		while (StartOf(3)) {
			dmod  = new DeclModifierData(); 
			while (StartOf(2)) {
				DeclModifier(ref dmod);
			}
			ClassMemberDecl(dmod, members, true, false, false);
		}
		Expect(78);
		trait = new TraitDecl(id, id.val, module, typeArgs, members, attrs, isRefining, parentTraits);
		trait.BodyStartTok = bodyStart;
		trait.BodyEndTok = t;
		
	}

	void ClassMemberDecl(DeclModifierData dmod, List<MemberDecl> mm, bool allowConstructors, bool isValueType, bool moduleLevelDecl) {
		Contract.Requires(cce.NonNullElements(mm));
		Method/*!*/ m;
		Function/*!*/ f;
		
		if (la.kind == 62) {
			if (moduleLevelDecl) {
			 SemErr(la, "fields are not allowed to be declared at the module level; instead, wrap the field in a 'class' declaration");
			 dmod.IsStatic = false;
			}
			
			FieldDecl(dmod, isValueType, mm);
		} else if (la.kind == 63) {
			ConstantFieldDecl(dmod, mm, moduleLevelDecl);
		} else if (IsFunctionDecl()) {
			if (moduleLevelDecl && dmod.StaticToken != null) {
			 errors.Warning(dmod.StaticToken, "module-level functions are always non-instance, so the 'static' keyword is not allowed here");
			 dmod.IsStatic = false;
			}
			
			FunctionDecl(dmod, out f);
			mm.Add(f); 
		} else if (StartOf(6)) {
			if (moduleLevelDecl && dmod.StaticToken != null) {
			 errors.Warning(dmod.StaticToken, "module-level methods are always non-instance, so the 'static' keyword is not allowed here");
			 dmod.IsStatic = false;
			}
			
			MethodDecl(dmod, allowConstructors, out m);
			mm.Add(m); 
		} else SynErr(176);
	}

	void ModuleDefinition(DeclModifierData dmod, ModuleDefinition parent, out ModuleDecl submodule) {
		Expect(101);
		Attributes attrs = null;
		IToken/*!*/ id, iderr;
		var prefixIds = new List<IToken>();
		List<MemberDecl/*!*/> namedModuleDefaultClassMembers = new List<MemberDecl>();;
		List<IToken> idQualified = null;
		List<IToken> idRefined = null;
		ModuleDefinition module;
		submodule = null; // appease compiler
		bool isAbstract = dmod.IsAbstract;
		CheckDeclModifiers(dmod, "module", AllowedDeclModifiers.Abstract);
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		ModuleQualifiedName(out idQualified);
		id = idQualified[idQualified.Count-1];
		prefixIds = idQualified.GetRange(0,idQualified.Count-1);
		
		if (StartOf(7)) {
			if (la.kind == 102) {
				Get();
				ModuleQualifiedName(out idRefined);
			} else {
				Ident(out iderr);
				SemErr(la, $"expected either a '{{' or a 'refines' keyword here, found {iderr.val}"); 
			}
		}
		module = new ModuleDefinition(id, id.val, prefixIds, isAbstract, false,
		                                 idRefined == null ? null : new ModuleQualifiedId(idRefined), parent, attrs,
		                                 false, theVerifyThisFile, theCompileThisFile);
		
		while (!(la.kind == 0 || la.kind == 77)) {SynErr(177); Get();}
		Expect(77);
		module.BodyStartTok = t; 
		while (StartOf(1)) {
			TopDecl(module, namedModuleDefaultClassMembers, /* isTopLevel */ false, isAbstract);
		}
		Expect(78);
		module.BodyEndTok = t;
		module.TopLevelDecls.Add(new DefaultClassDecl(module, namedModuleDefaultClassMembers));
		submodule = new LiteralModuleDecl(module, parent);
		
	}

	void ModuleImport(ModuleDefinition parent, out ModuleDecl submodule) {
		Expect(56);
		bool opened = false;
		List<IToken> idExports = new List<IToken>();
		IToken/*!*/ id;
		List<IToken> idPath = new List<IToken>();
		submodule = null;
		
		if (la.kind == 103) {
			Get();
			opened = true;
		}
		int lookAhead = scanner.Peek().kind; 
		if (lookAhead == _singleeq) {
			ModuleName(out id);
			Expect(85);
			QualifiedModuleExport(out idPath, out idExports);
			submodule = new AliasModuleDecl(new ModuleQualifiedId(idPath),
			                           id, parent, opened, idExports); 
		} else if (lookAhead == _colon) {
			ModuleName(out id);
			Expect(24);
			QualifiedModuleExport(out idPath, out idExports);
			submodule = new AbstractModuleDecl(new ModuleQualifiedId(idPath),
			                           id, parent, opened, idExports); 
		} else if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			QualifiedModuleExport(out idPath, out idExports);
			submodule = new AliasModuleDecl(new ModuleQualifiedId(idPath),
			                           idPath[idPath.Count-1], parent, opened, idExports);
			
		} else SynErr(178);
	}

	void ModuleExport(ModuleDefinition parent, out ModuleDecl submodule) {
		Expect(57);
		IToken exportId = t;
		IToken/*!*/ id;
		List<ExportSignature> exports = new List<ExportSignature>();;
		List<IToken> extends = new List<IToken>();
		bool provideAll = false;
		bool revealAll = false;
		bool isDefault = false;
		bool isRefining = false;
		ExportSignature exsig;
		
		if (StartOf(8)) {
			ExportId(out exportId);
		}
		if (la.kind == 92) {
			Get();
			isRefining = true; 
		}
		while (la.kind == 104 || la.kind == 105 || la.kind == 106) {
			if (la.kind == 104) {
				Get();
				if (StartOf(8)) {
					ExportSignature(true, out exsig);
					exports.Add(exsig); 
					while (la.kind == 25) {
						Get();
						ExportSignature(true, out exsig);
						exports.Add(exsig); 
					}
				} else if (la.kind == 89) {
					Get();
					provideAll = true; 
				} else SynErr(179);
			} else if (la.kind == 105) {
				Get();
				if (StartOf(8)) {
					ExportSignature(false, out exsig);
					exports.Add(exsig); 
					while (la.kind == 25) {
						Get();
						ExportSignature(false, out exsig);
						exports.Add(exsig); 
					}
				} else if (la.kind == 89) {
					Get();
					revealAll = true; 
				} else SynErr(180);
			} else {
				Get();
				ExportId(out id);
				extends.Add(id); 
				while (la.kind == 25) {
					Get();
					ExportId(out id);
					extends.Add(id); 
				}
			}
		}
		if (exportId.val == "export" || exportId.val == parent.Name) {
		 isDefault = true;
		}
		submodule = new ModuleExportDecl(exportId, parent, exports, extends, provideAll, revealAll, isDefault, isRefining);
		
	}

	void Attribute(ref Attributes attrs) {
		IToken openBrace, closeBrace;
		IToken x = null;
		var args = new List<Expression>();
		
		Expect(76);
		openBrace = t; 
		ConvertKeywordTokenToIdent(); 
		AttributeName(out x);
		if (StartOf(4)) {
			Expressions(args);
		}
		Expect(78);
		closeBrace = t; 
		attrs = new UserSuppliedAttributes(x, openBrace, closeBrace, args, attrs); 
	}

	void ModuleQualifiedName(out List<IToken> ids) {
		IToken id; ids = new List<IToken>();
		
		ModuleName(out id);
		ids.Add(id); 
		while (la.kind == 31) {
			Get();
			ModuleName(out id);
			ids.Add(id); 
		}
	}

	void Ident(out IToken/*!*/ x) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null); 
		if (la.kind == 1) {
			Get();
		} else if (la.kind == 49) {
			Get();
			t.kind = _ident; 
		} else if (la.kind == 50) {
			Get();
			t.kind = _ident; 
		} else SynErr(181);
		x = t; 
	}

	void ModuleName(out IToken id) {
		NoUSIdent(out id);
	}

	void QualifiedModuleExport(out List<IToken> idPath, out List<IToken> exports) {
		exports = new List<IToken>();
		
		ModuleQualifiedName(out idPath);
		if (la.kind == 32) {
			Get();
			ModuleExportSuffix(exports);
		}
	}

	void ExportId(out IToken id) {
		NoUSIdentOrDigits(out id);
	}

	void NoUSIdentOrDigits(out IToken id) {
		id = Token.NoToken; 
		if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			NoUSIdent(out id);
		} else if (la.kind == 2) {
			Get();
			id = t; 
		} else SynErr(182);
	}

	void ExportSignature(bool opaque, out ExportSignature exsig) {
		IToken prefix; IToken suffix = null; 
		TypeNameOrCtorSuffix(out prefix);
		if (la.kind == 31) {
			Get();
			TypeNameOrCtorSuffix(out suffix);
		}
		if (suffix != null) {
		 exsig = new ExportSignature(prefix, prefix.val, suffix, suffix.val, opaque);
		} else {
		 exsig = new ExportSignature(prefix, prefix.val, opaque);
		}
		
	}

	void TypeNameOrCtorSuffix(out IToken id) {
		id = Token.NoToken; 
		IdentOrDigits(out id);
	}

	void NoUSIdent(out IToken/*!*/ x) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null); 
		Ident(out x);
		if (x.val.StartsWith("_")) {
		 SemErr("cannot declare identifier beginning with underscore");
		}
		
	}

	void ModuleExportSuffix(List<IToken> exports) {
		IToken id; 
		if (StartOf(8)) {
			ExportId(out id);
			exports.Add(id); 
		} else if (la.kind == 77) {
			Get();
			ExportId(out id);
			exports.Add(id); 
			while (la.kind == 25) {
				Get();
				ExportId(out id);
				exports.Add(id); 
			}
			Expect(78);
		} else SynErr(183);
	}

	void ClassName(out IToken id) {
		NoUSIdent(out id);
	}

	void GenericParameters(List<TypeParameter/*!*/>/*!*/ typeArgs, bool allowVariance) {
		Contract.Requires(cce.NonNullElements(typeArgs));
		IToken/*!*/ id;
		TypeParameter.TypeParameterCharacteristics characteristics;
		TypeParameter.TPVarianceSyntax variance = TypeParameter.TPVarianceSyntax.NonVariant_Strict;  // assignment is to please compiler
		characteristics = new TypeParameter.TypeParameterCharacteristics(false);
		
		Expect(83);
		if (StartOf(9)) {
			Variance(out variance);
			if (!allowVariance) { SemErr(t, "type-parameter variance is not allowed to be specified in this context"); } 
		}
		TypeVariableName(out id);
		while (la.kind == 81) {
			TypeParameterCharacteristics(ref characteristics);
		}
		typeArgs.Add(new TypeParameter(id, id.val, variance, characteristics)); 
		while (la.kind == 25) {
			Get();
			variance = TypeParameter.TPVarianceSyntax.NonVariant_Strict;
			characteristics = new TypeParameter.TypeParameterCharacteristics(false);
			
			if (StartOf(9)) {
				Variance(out variance);
				if (!allowVariance) { SemErr(t, "type-parameter variance is not allowed to be specified in this context"); } 
			}
			TypeVariableName(out id);
			while (la.kind == 81) {
				TypeParameterCharacteristics(ref characteristics);
			}
			typeArgs.Add(new TypeParameter(id, id.val, variance, characteristics)); 
		}
		Expect(84);
	}

	void Type(out Type ty) {
		Contract.Ensures(Contract.ValueAtReturn(out ty) != null); IToken/*!*/ tok; 
		TypeAndToken(out tok, out ty, false);
	}

	void FieldDecl(DeclModifierData dmod, bool isValueType, List<MemberDecl> mm) {
		Contract.Requires(cce.NonNullElements(mm));
		Attributes attrs = null;
		IToken/*!*/ id;  Type/*!*/ ty;
		CheckDeclModifiers(dmod, "field", AllowedDeclModifiers.Ghost);
		if (isValueType) {
		 // we're about to produce an error; put fields into a throw-away list, so we don't return them
		 mm = new List<MemberDecl>();
		}
		
		while (!(la.kind == 0 || la.kind == 62)) {SynErr(184); Get();}
		Expect(62);
		if (isValueType) {
		 SemErr(t, "mutable fields are not allowed in value types");
		}
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		FIdentType(out id, out ty);
		mm.Add(new Field(id, id.val, dmod.IsGhost, ty, attrs)); 
		while (la.kind == 25) {
			Get();
			FIdentType(out id, out ty);
			mm.Add(new Field(id, id.val, dmod.IsGhost, ty, attrs)); 
		}
		OldSemi();
	}

	void ConstantFieldDecl(DeclModifierData dmod, List<MemberDecl/*!*/>/*!*/ mm, bool moduleLevelDecl) {
		Contract.Requires(cce.NonNullElements(mm));
		Attributes attrs = null;
		IToken/*!*/ id;  Type/*!*/ ty;
		Expression e = null;
		if (moduleLevelDecl && dmod.StaticToken != null) {
		 errors.Warning(dmod.StaticToken, "module-level const declarations are always non-instance, so the 'static' keyword is not allowed here");
		 dmod.IsStatic = false;
		}
		CheckDeclModifiers(dmod, "field", AllowedDeclModifiers.Ghost | AllowedDeclModifiers.Static);
		
		while (!(la.kind == 0 || la.kind == 63)) {SynErr(185); Get();}
		Expect(63);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		CIdentType(out id, out ty);
		if (ty == null) { ty = new InferredTypeProxy(); } 
		if (la.kind == 92) {
			Get();
		}
		if (la.kind == 28) {
			Get();
			Expression(out e, false, true);
		}
		if (e == null && ty is InferredTypeProxy) {
		 SemErr(id, "a const declaration must have a type or a RHS value");
		}
		mm.Add(new ConstantField(id, id.val, e, dmod.IsStatic, dmod.IsGhost, ty, attrs));
		
		OldSemi();
	}

	void FunctionDecl(DeclModifierData dmod, out Function/*!*/ f) {
		Contract.Ensures(Contract.ValueAtReturn(out f)!=null);
		Attributes attrs = null;
		IToken/*!*/ id = Token.NoToken;  // to please compiler
		List<TypeParameter/*!*/> typeArgs = new List<TypeParameter/*!*/>();
		List<Formal/*!*/> formals = new List<Formal/*!*/>();
		Formal/*!*/ result = null;
		Type/*!*/ returnType = new BoolType();
		List<AttributedExpression/*!*/> reqs = new List<AttributedExpression/*!*/>();
		List<AttributedExpression/*!*/> ens = new List<AttributedExpression/*!*/>();
		List<FrameExpression/*!*/> reads = new List<FrameExpression/*!*/>();
		List<Expression/*!*/> decreases;
		Expression body = null;
		bool isPredicate = false; bool isLeastPredicate = false; bool isGreatestPredicate = false;
		bool isFunctionMethod = false;
		IToken bodyStart = Token.NoToken;
		IToken bodyEnd = Token.NoToken;
		IToken signatureEllipsis = null;
		bool isTwoState = false;
		ExtremePredicate.KType kType = ExtremePredicate.KType.Unspecified;
		
		if (la.kind == 52) {
			Get();
			isTwoState = true; 
		}
		if (la.kind == 47) {
			Get();
			if (la.kind == 67) {
				Get();
				if (isTwoState) { SemErr(t, "twostate functions are supported only as a ghosts, not as function methods"); }
				else { isFunctionMethod = true; }
				
			}
			AllowedDeclModifiers allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static;
			string caption = "function";
			if (isFunctionMethod) {
			 caption = "function method";
			}
			CheckDeclModifiers(dmod, caption, allowed);
			
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			MethodFunctionName(out id);
			if (la.kind == 81 || la.kind == 83) {
				if (la.kind == 83) {
					GenericParameters(typeArgs, false);
				}
				Formals(true, true, isTwoState, formals);
				Expect(24);
				if (FollowedByColon()) {
					Expect(81);
					GIdentType(false, false, false, out var resultId, out var ty, out var isGhost, out var isOld, out var isNameOnly);
					Contract.Assert(!isGhost && !isOld && !isNameOnly);
					result = new Formal(resultId, resultId.val, ty, false, false, null, false);
					
					Expect(82);
				} else if (StartOf(5)) {
					Type(out returnType);
				} else SynErr(186);
			} else if (la.kind == 92) {
				Get();
				signatureEllipsis = t; 
			} else SynErr(187);
		} else if (la.kind == 48) {
			Get();
			isPredicate = true; 
			if (la.kind == 67) {
				Get();
				if (isTwoState) { SemErr(t, "twostate predicates are supported only as a ghosts, not as predicate methods"); }
				else { isFunctionMethod = true; }
				
			}
			AllowedDeclModifiers allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static;
			string caption = "predicate";
			if (isFunctionMethod) {
			 caption = "predicate method";
			}
			CheckDeclModifiers(dmod, caption, allowed);
			
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			MethodFunctionName(out id);
			if (StartOf(10)) {
				if (la.kind == 83) {
					GenericParameters(typeArgs, false);
				}
				if (la.kind == 81) {
					Formals(true, true, isTwoState, formals);
				}
				if (la.kind == 24) {
					Get();
					Type(out returnType);
					SemErr(t, "predicates do not have an explicitly declared return type; it is always bool"); 
				}
			} else if (la.kind == 92) {
				Get();
				signatureEllipsis = t; 
			} else SynErr(188);
		} else if (la.kind == 49 || la.kind == 51) {
			Contract.Assert(!isTwoState);  // the IsFunctionDecl check checks that "twostate" is not followed by "least"
			
			if (la.kind == 49) {
				Get();
			} else {
				Get();
				errors.Deprecated(t, "the old keyword phrase 'inductive predicate' has been renamed to 'least predicate'"); 
			}
			Expect(48);
			isLeastPredicate = true;
			CheckDeclModifiers(dmod, "least predicate",
			 AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static);
			
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			MethodFunctionName(out id);
			if (la.kind == 79 || la.kind == 81 || la.kind == 83) {
				if (la.kind == 83) {
					GenericParameters(typeArgs, false);
				}
				if (la.kind == 79) {
					KType(ref kType);
				}
				Formals(true, isFunctionMethod, false, formals);
				if (la.kind == 24) {
					Get();
					SemErr(t, "least predicates do not have an explicitly declared return type; it is always bool"); 
				}
			} else if (la.kind == 92) {
				Get();
				signatureEllipsis = t; 
			} else SynErr(189);
		} else if (la.kind == 50 || la.kind == 53) {
			Contract.Assert(!isTwoState);  // the IsFunctionDecl check checks that "twostate" is not followed by "greatest"
			
			if (la.kind == 50) {
				Get();
				Expect(48);
			} else {
				Get();
				errors.Deprecated(t, "the old keyword 'copredicate' has been renamed to the keyword phrase 'greatest predicate'"); 
			}
			isGreatestPredicate = true;
			CheckDeclModifiers(dmod, "greatest predicate",
			 AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static);
			
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			MethodFunctionName(out id);
			if (la.kind == 79 || la.kind == 81 || la.kind == 83) {
				if (la.kind == 83) {
					GenericParameters(typeArgs, false);
				}
				if (la.kind == 79) {
					KType(ref kType);
				}
				Formals(true, isFunctionMethod, false, formals);
				if (la.kind == 24) {
					Get();
					SemErr(t, "greatest predicates do not have an explicitly declared return type; it is always bool"); 
				}
			} else if (la.kind == 92) {
				Get();
				signatureEllipsis = t; 
			} else SynErr(190);
		} else SynErr(191);
		decreases = isLeastPredicate || isGreatestPredicate ? null : new List<Expression/*!*/>(); 
		FunctionSpec(reqs, reads, ens, decreases);
		IToken byMethodTok = null; BlockStmt byMethodBody = null; 
		if (la.kind == 77) {
			FunctionBody(out body, out bodyStart, out bodyEnd, out byMethodTok, out byMethodBody);
			if (byMethodBody != null) {
			 if (isTwoState) {
			   SemErr(byMethodBody.Tok, "a 'by method' implementation is not allowed on a twostate function");
			 } else if (isLeastPredicate || isGreatestPredicate) {
			   SemErr(byMethodBody.Tok, "a 'by method' implementation is not allowed on an extreme predicate");
			 } else if (isFunctionMethod) {
			   var what = isPredicate ? "predicate" : "function";
			   SemErr(byMethodBody.Tok,
			    $"to use a 'by method' implementation with a {what}, declare {id.val} using '{what}', not '{what} method'");
			 }
			}
			
		}
		if (byMethodBody == null && !isFunctionMethod) {
		 foreach (var formal in formals) {
		   if (formal.IsGhost) {
		     SemErr(formal.tok, "formal cannot be declared 'ghost' in this context");
		   }
		 }
		}
		
		IToken tok = id;
		if (isTwoState && isPredicate) {
		  f = new TwoStatePredicate(tok, id.val, dmod.IsStatic, typeArgs, formals,
		                            reqs, reads, ens, new Specification<Expression>(decreases, null), body, attrs, signatureEllipsis);
		} else if (isTwoState) {
		  f = new TwoStateFunction(tok, id.val, dmod.IsStatic, typeArgs, formals, result, returnType,
		                           reqs, reads, ens, new Specification<Expression>(decreases, null), body, attrs, signatureEllipsis);
		} else if (isPredicate) {
		  f = new Predicate(tok, id.val, dmod.IsStatic, !isFunctionMethod && byMethodBody == null, typeArgs, formals,
		                    reqs, reads, ens, new Specification<Expression>(decreases, null), body, Predicate.BodyOriginKind.OriginalOrInherited,
		                    byMethodTok, byMethodBody, attrs, signatureEllipsis);
		} else if (isLeastPredicate) {
		  f = new LeastPredicate(tok, id.val, dmod.IsStatic, kType, typeArgs, formals,
		                         reqs, reads, ens, body, attrs, signatureEllipsis);
		} else if (isGreatestPredicate) {
		  f = new GreatestPredicate(tok, id.val, dmod.IsStatic, kType, typeArgs, formals,
		                            reqs, reads, ens, body, attrs, signatureEllipsis);
		} else {
		  f = new Function(tok, id.val, dmod.IsStatic, !isFunctionMethod && byMethodBody == null,
		                   typeArgs, formals, result, returnType,
		                   reqs, reads, ens, new Specification<Expression>(decreases, null), body,
		                   byMethodTok, byMethodBody,
		                   attrs, signatureEllipsis);
		}
		f.BodyStartTok = bodyStart;
		f.BodyEndTok = bodyEnd;
		theBuiltIns.CreateArrowTypeDecl(formals.Count);
		if (isLeastPredicate || isGreatestPredicate) {
		 // also create an arrow type for the corresponding prefix predicate
		 theBuiltIns.CreateArrowTypeDecl(formals.Count + 1);
		}
		
	}

	void MethodDecl(DeclModifierData dmod, bool allowConstructor, out Method/*!*/ m) {
		Contract.Ensures(Contract.ValueAtReturn(out m) !=null);
		IToken/*!*/ id = Token.NoToken;
		bool hasName = false;  IToken keywordToken;
		Attributes attrs = null;
		List<TypeParameter/*!*/>/*!*/ typeArgs = new List<TypeParameter/*!*/>();
		List<Formal/*!*/> ins = new List<Formal/*!*/>();
		List<Formal/*!*/> outs = new List<Formal/*!*/>();
		List<AttributedExpression/*!*/> req = new List<AttributedExpression/*!*/>();
		List<FrameExpression/*!*/> mod = new List<FrameExpression/*!*/>();
		List<AttributedExpression/*!*/> ens = new List<AttributedExpression/*!*/>();
		List<Expression/*!*/> dec = new List<Expression/*!*/>();
		Attributes decAttrs = null;
		Attributes modAttrs = null;
		BlockStmt body = null;
		bool isPlainOlMethod = false;
		bool isLemma = false;
		bool isTwoStateLemma = false;
		bool isConstructor = false;
		bool isLeastLemma = false;
		bool isGreatestLemma = false;
		IToken signatureEllipsis = null;
		IToken bodyStart = Token.NoToken;
		IToken bodyEnd = Token.NoToken;
		AllowedDeclModifiers allowed = AllowedDeclModifiers.None;
		string caption = "";
		ExtremePredicate.KType kType = ExtremePredicate.KType.Unspecified;
		
		while (!(StartOf(11))) {SynErr(192); Get();}
		switch (la.kind) {
		case 67: {
			Get();
			isPlainOlMethod = true; caption = "method";
			allowed = AllowedDeclModifiers.Ghost | AllowedDeclModifiers.Static; 
			break;
		}
		case 54: {
			Get();
			isLemma = true; caption = "lemma";
			allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static; 
			break;
		}
		case 50: case 68: {
			if (la.kind == 50) {
				Get();
				Expect(54);
			} else {
				Get();
				errors.Deprecated(t, "the old keyword 'colemma' has been renamed to the keyword phrase 'greatest lemma'"); 
			}
			isGreatestLemma = true; caption = "greatest lemma";
			allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static; 
			break;
		}
		case 49: case 51: {
			if (la.kind == 49) {
				Get();
			} else {
				Get();
				errors.Deprecated(t, "the old keyword phrase 'inductive lemma' has been renamed to 'least lemma'"); 
			}
			Expect(54);
			isLeastLemma = true;  caption = "least lemma";
			allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static;
			break;
		}
		case 52: {
			Get();
			Expect(54);
			isTwoStateLemma = true; caption = "two-state lemma";
			allowed = AllowedDeclModifiers.AlreadyGhost | AllowedDeclModifiers.Static; 
			break;
		}
		case 69: {
			Get();
			if (allowConstructor) {
			 isConstructor = true;
			} else {
			 SemErr(t, "constructors are allowed only in classes");
			}
			caption = "constructor";
			allowed = AllowedDeclModifiers.None;
			
			break;
		}
		default: SynErr(193); break;
		}
		keywordToken = t;
		CheckDeclModifiers(dmod, caption, allowed); 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(8)) {
			MethodFunctionName(out id);
			hasName = true; 
		}
		if (!hasName) {
		 id = keywordToken;
		 if (!isConstructor) {
		   SemErr(la, "a method must be given a name (expecting identifier)");
		 }
		}
		
		if (la.kind == 79 || la.kind == 81 || la.kind == 83) {
			if (la.kind == 83) {
				GenericParameters(typeArgs, false);
			}
			if (la.kind == 79) {
				KType(ref kType);
				if (!(isGreatestLemma || isLeastLemma)) { SemErr(t, "type of _k can only be specified for least and greatest lemmas"); } 
			}
			var isCompilable = (isPlainOlMethod && !dmod.IsGhost) || isConstructor; 
			Formals(true, isCompilable, isTwoStateLemma, ins);
			if (la.kind == 110) {
				Get();
				if (isConstructor) { SemErr(t, "constructors cannot have out-parameters"); } 
				Formals(false, isCompilable, false, outs);
			}
		} else if (la.kind == 92) {
			Get();
			signatureEllipsis = t; 
		} else SynErr(194);
		MethodSpec(dmod.IsGhost || isLemma || isTwoStateLemma || isLeastLemma || isGreatestLemma,
req, mod, ens, dec, ref decAttrs, ref modAttrs, caption, isConstructor);
		if (la.kind == 77) {
			if (isConstructor) {
				DividedBlockStmt dividedBody; 
				DividedBlockStmt(out dividedBody, out bodyStart, out bodyEnd);
				body = dividedBody; 
			} else {
				BlockStmt(out body, out bodyStart, out bodyEnd);
			}
		}
		IToken tok = id;
		if (isConstructor) {
		 m = new Constructor(tok, hasName ? id.val : "_ctor", typeArgs, ins,
		                     req, new Specification<FrameExpression>(mod, modAttrs), ens, new Specification<Expression>(dec, decAttrs), (DividedBlockStmt)body, attrs, signatureEllipsis);
		} else if (isLeastLemma) {
		 m = new LeastLemma(tok, id.val, dmod.IsStatic, kType, typeArgs, ins, outs,
		                    req, new Specification<FrameExpression>(mod, modAttrs), ens, new Specification<Expression>(dec, decAttrs), body, attrs, signatureEllipsis);
		} else if (isGreatestLemma) {
		 m = new GreatestLemma(tok, id.val, dmod.IsStatic, kType, typeArgs, ins, outs,
		                       req, new Specification<FrameExpression>(mod, modAttrs), ens, new Specification<Expression>(dec, decAttrs), body, attrs, signatureEllipsis);
		} else if (isLemma) {
		 m = new Lemma(tok, id.val, dmod.IsStatic, typeArgs, ins, outs,
		               req, new Specification<FrameExpression>(mod, modAttrs), ens, new Specification<Expression>(dec, decAttrs), body, attrs, signatureEllipsis);
		} else if (isTwoStateLemma) {
		 m = new TwoStateLemma(tok, id.val, dmod.IsStatic, typeArgs, ins, outs,
		                       req, new Specification<FrameExpression>(mod, modAttrs),
		                       ens, new Specification<Expression>(dec, decAttrs), body, attrs, signatureEllipsis);
		} else {
		 m = new Method(tok, id.val, dmod.IsStatic, dmod.IsGhost, typeArgs, ins, outs,
		                req, new Specification<FrameExpression>(mod, modAttrs), ens, new Specification<Expression>(dec, decAttrs), body, attrs, signatureEllipsis);
		}
		m.BodyStartTok = bodyStart;
		m.BodyEndTok = bodyEnd;
		
	}

	void DatatypeName(out IToken id) {
		NoUSIdent(out id);
	}

	void DatatypeMemberDecl(List<DatatypeCtor/*!*/>/*!*/ ctors) {
		Contract.Requires(cce.NonNullElements(ctors));
		Attributes attrs = null;
		IToken/*!*/ id;
		List<Formal/*!*/> formals = new List<Formal/*!*/>();
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		DatatypeMemberName(out id);
		if (la.kind == 81) {
			FormalsOptionalIds(formals);
		}
		ctors.Add(new DatatypeCtor(id, id.val, formals, attrs)); 
	}

	void TypeMembers(ModuleDefinition/*!*/ module, List<MemberDecl> members ) {
		DeclModifierData dmod;
		
		Expect(77);
		while (StartOf(3)) {
			dmod = new DeclModifierData(); 
			while (StartOf(2)) {
				DeclModifier(ref dmod);
			}
			ClassMemberDecl(dmod, members, false, true, false);
		}
		Expect(78);
	}

	void DatatypeMemberName(out IToken id) {
		NoUSIdentOrDigits(out id);
	}

	void FormalsOptionalIds(List<Formal/*!*/>/*!*/ formals) {
		Contract.Requires(cce.NonNullElements(formals));
		IToken/*!*/ id;  Type/*!*/ ty;  string/*!*/ name;  bool isGhost;  Expression/*?*/ defaultValue;
		bool isNameOnly;
		
		Expect(81);
		if (StartOf(12)) {
			TypeIdentOptional(out id, out name, out ty, out isGhost, out defaultValue, out isNameOnly);
			formals.Add(new Formal(id, name, ty, true, isGhost, defaultValue, false, isNameOnly)); 
			while (la.kind == 25) {
				Get();
				TypeIdentOptional(out id, out name, out ty, out isGhost, out defaultValue, out isNameOnly);
				formals.Add(new Formal(id, name, ty, true, isGhost, defaultValue, false, isNameOnly)); 
			}
		}
		Expect(82);
	}

	void FIdentType(out IToken/*!*/ id, out Type/*!*/ ty) {
		Contract.Ensures(Contract.ValueAtReturn(out id) != null); Contract.Ensures(Contract.ValueAtReturn(out ty) != null);
		id = Token.NoToken;
		
		NoUSIdentOrDigits(out id);
		id = t; 
		Expect(24);
		Type(out ty);
	}

	void OldSemi() {
		if (la.kind == 33) {
			while (!(la.kind == 0 || la.kind == 33)) {SynErr(195); Get();}
			Get();
			errors.DeprecatedStyle(t, "deprecated style: a semi-colon is not needed here"); 
		}
	}

	void CIdentType(out IToken/*!*/ id, out Type ty) {
		Contract.Ensures(Contract.ValueAtReturn(out id) != null);
		id = Token.NoToken;
		ty = null;
		
		NoUSIdentOrDigits(out id);
		id = t; 
		if (la.kind == 24) {
			Get();
			Type(out ty);
		}
	}

	void Expression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps = true) {
		Expression e0; IToken endTok; 
		EquivExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
		if (SemiFollowsCall(allowLemma, e)) {
			Expect(33);
			endTok = t; 
			Expression(out e0, allowLemma, allowLambda);
			e = new StmtExpr(e.tok,
			     new UpdateStmt(e.tok, endTok, new List<Expression>(), new List<AssignmentRhs>() { new ExprRhs(e, null) }),
			     e0);
			
		}
	}

	void NewtypeName(out IToken id) {
		NoUSIdent(out id);
	}

	void LocalVarName(out IToken id) {
		NoUSIdent(out id);
	}

	void SynonymTypeName(out IToken id) {
		NoUSIdent(out id);
	}

	void TypeParameterCharacteristics(ref TypeParameter.TypeParameterCharacteristics characteristics) {
		Expect(81);
		TPCharOption(ref characteristics);
		while (la.kind == 25) {
			Get();
			TPCharOption(ref characteristics);
		}
		Expect(82);
	}

	void GIdentType(bool allowGhostKeyword, bool allowNewKeyword, bool allowNameOnlyKeyword,
out IToken/*!*/ id, out Type/*!*/ ty, out bool isGhost, out bool isOld, out bool isNameOnly) {
		Contract.Ensures(Contract.ValueAtReturn(out id)!=null);
		Contract.Ensures(Contract.ValueAtReturn(out ty)!=null);
		isGhost = false; isOld = allowNewKeyword; isNameOnly = false; 
		while (la.kind == 74 || la.kind == 107 || la.kind == 108) {
			if (la.kind == 74) {
				Get();
				if (allowGhostKeyword) { isGhost = true; } else { SemErr(t, "formal cannot be declared 'ghost' in this context"); } 
			} else if (la.kind == 107) {
				Get();
				if (allowNewKeyword) { isOld = false; } else { SemErr(t, "formal cannot be declared 'new' in this context"); } 
			} else {
				Get();
				if (allowNameOnlyKeyword) { isNameOnly = true; } else { SemErr(t, "formal cannot be declared 'nameonly' in this context"); } 
			}
		}
		IdentType(out id, out ty, false);
	}

	void IdentType(out IToken/*!*/ id, out Type/*!*/ ty, bool allowWildcardId) {
		Contract.Ensures(Contract.ValueAtReturn(out id) != null); Contract.Ensures(Contract.ValueAtReturn(out ty) != null);
		WildIdent(out id, allowWildcardId);
		Expect(24);
		Type(out ty);
	}

	void WildIdent(out IToken x, bool allowWildcardId) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null); 
		Ident(out x);
		t.val = UnwildIdent(t.val, allowWildcardId); 
	}

	void LocalIdentTypeOptional(out LocalVariable var, bool isGhost, bool allowWild=true) {
		IToken id;  Type ty;  Type optType = null;
		
		WildIdent(out id, allowWild);
		if (la.kind == 24) {
			Get();
			Type(out ty);
			optType = ty; 
		}
		var = new LocalVariable(id, id, id.val, optType == null ? new InferredTypeProxy() : optType, isGhost); 
	}

	void IdentTypeOptional(out BoundVar var) {
		Contract.Ensures(Contract.ValueAtReturn(out var) != null);
		IToken id;  Type ty;  Type optType = null;
		
		WildIdent(out id, true);
		if (la.kind == 24) {
			Get();
			Type(out ty);
			optType = ty; 
		}
		var = new BoundVar(id, id.val, optType == null ? new InferredTypeProxy() : optType); 
	}

	void TypeIdentOptional(out IToken/*!*/ id, out string/*!*/ identName, out Type/*!*/ ty, out bool isGhost, out Expression defaultValue, out bool isNameOnly) {
		Contract.Ensures(Contract.ValueAtReturn(out id)!=null);
		Contract.Ensures(Contract.ValueAtReturn(out ty)!=null);
		Contract.Ensures(Contract.ValueAtReturn(out identName)!=null);
		string name = null; id = Token.NoToken; ty = new BoolType()/*dummy*/; isGhost = false;
		IToken nameonlyToken = null;
		defaultValue = null;
		
		while (la.kind == 74 || la.kind == 108) {
			if (la.kind == 74) {
				Get();
				isGhost = true; 
			} else {
				Get();
				nameonlyToken = t; 
			}
		}
		if (StartOf(5)) {
			TypeAndToken(out id, out ty, false);
			if (la.kind == 24) {
				Get();
				UserDefinedType udt = ty as UserDefinedType;
				if (udt != null && udt.TypeArgs.Count == 0) {
				 name = udt.Name;
				} else {
				 SemErr(id, "invalid formal-parameter name in datatype constructor");
				}
				
				Type(out ty);
				ParameterDefaultValue(true, out defaultValue);
			}
		} else if (la.kind == 2) {
			Get();
			id = t; name = id.val;
			Expect(24);
			Type(out ty);
			ParameterDefaultValue(true, out defaultValue);
		} else SynErr(196);
		if (name != null) {
		 identName = name;
		 isNameOnly = nameonlyToken != null;
		} else {
		 identName = "#" + anonymousIds++;
		 if (nameonlyToken != null) {
		   SemErr(nameonlyToken, "use of the 'nameonly' modifier must be accompanied with a parameter name");
		 }
		 isNameOnly = false;
		}
		
	}

	void TypeAndToken(out IToken tok, out Type ty, bool inExpressionContext) {
		Contract.Ensures(Contract.ValueAtReturn(out tok)!=null);
		Contract.Ensures(Contract.ValueAtReturn(out ty) != null);
		tok = Token.NoToken;
		ty = new BoolType();  /*keep compiler happy*/
		List<Type> gt;
		List<Type> tupleArgTypes = null;
		List<bool> argumentGhostness = null;
		
		switch (la.kind) {
		case 7: {
			Get();
			tok = t; 
			break;
		}
		case 8: {
			Get();
			tok = t;  ty = new CharType(); 
			break;
		}
		case 9: {
			Get();
			tok = t;  ty = new IntType(); 
			break;
		}
		case 10: {
			Get();
			tok = t;  ty = new UserDefinedType(tok, tok.val, null); 
			break;
		}
		case 11: {
			Get();
			tok = t;  ty = new RealType(); 
			break;
		}
		case 12: {
			Get();
			tok = t;  ty = new BigOrdinalType(); 
			break;
		}
		case 6: {
			Get();
			tok = t;
			int w = StringToInt(tok.val.Substring(2), 0, "bitvectors that wide");
			ty = new BitvectorType(w);
			
			break;
		}
		case 16: {
			Get();
			tok = t;
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt != null && gt.Count > 1) {
			 SemErr("set type expects only one type argument");
			}
			ty = new SetType(true, gt != null ?gt[0] : null);
			
			break;
		}
		case 17: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt != null && gt.Count > 1) {
			 SemErr("set type expects only one type argument");
			}
			ty = new SetType(false, gt != null ? gt[0] : null);
			
			break;
		}
		case 18: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt != null && gt.Count > 1) {
			 SemErr("multiset type expects only one type argument");
			}
			ty = new MultiSetType(gt != null ? gt[0] : null);
			
			break;
		}
		case 19: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt != null && gt.Count > 1) {
			 SemErr("seq type expects only one type argument");
			}
			ty = new SeqType(gt != null ? gt[0] : null);
			
			break;
		}
		case 15: {
			Get();
			tok = t;  ty = new UserDefinedType(tok, tok.val, null); 
			break;
		}
		case 13: {
			Get();
			tok = t;  ty = new UserDefinedType(tok, tok.val, null); 
			break;
		}
		case 14: {
			Get();
			tok = t;  ty = new UserDefinedType(tok, tok.val, null); 
			break;
		}
		case 20: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt == null) {
			 ty = new MapType(true, null, null);
			} else if (gt.Count != 2) {
			 SemErr("map type expects two type arguments");
			 ty = new MapType(true, gt[0], gt.Count == 1 ? new InferredTypeProxy() : gt[1]);
			} else {
			 ty = new MapType(true, gt[0], gt[1]);
			}
			
			break;
		}
		case 21: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			if (gt == null) {
			 ty = new MapType(false, null, null);
			} else if (gt.Count != 2) {
			 SemErr("imap type expects two type arguments");
			 ty = new MapType(false, gt[0], gt.Count == 1 ? new InferredTypeProxy() : gt[1]);
			} else {
			 ty = new MapType(false, gt[0], gt[1]);
			}
			
			break;
		}
		case 5: {
			Get();
			tok = t; 
			OptGenericInstantiation(out gt, inExpressionContext);
			var tokString = tok.val;
			bool q = tokString[tokString.Length-1] == '?';
			// Extracting the dimension out of array2 or array10?
			var dimString = tokString.Substring(5, tokString.Length - (q?6:5)); // 5 is length of "array"
			int dims = StringToInt(dimString, 1, "arrays of that many dimensions");
			ty = theBuiltIns.ArrayType(tok, dims, gt, true, q);
			
			break;
		}
		case 81: {
			TupleType(out ty, out tok, out tupleArgTypes, out argumentGhostness);
			break;
		}
		case 1: case 49: case 50: {
			NamedType(out ty, out tok, inExpressionContext);
			break;
		}
		default: SynErr(197); break;
		}
		if (la.kind == 95 || la.kind == 96 || la.kind == 97) {
			int arrowKind = 0; /* 0: any, 1: partial, 2: total */
			Type t2;
			
			if (la.kind == 96) {
				Get();
				tok = t; arrowKind = 0; 
			} else if (la.kind == 97) {
				Get();
				tok = t; arrowKind = 1; 
			} else {
				Get();
				tok = t; arrowKind = 2; 
			}
			Type(out t2);
			if (tupleArgTypes != null) {
			 gt = tupleArgTypes;
			} else {
			 gt = new List<Type>{ ty };
			}
			var arity = gt.Count;
			theBuiltIns.CreateArrowTypeDecl(arity);
			if (arrowKind == 0) {
			 ty = new ArrowType(tok, gt, t2);
			} else {
			 gt.Add(t2);
			 if (arrowKind == 1) {
			   ty = new UserDefinedType(tok, ArrowType.PartialArrowTypeName(arity), gt);
			 } else {
			   ty = new UserDefinedType(tok, ArrowType.TotalArrowTypeName(arity), gt);
			 }
			}
			
		}
	}

	void ParameterDefaultValue(bool incoming, out Expression defaultValue) {
		defaultValue = null; IToken tok;
		
		if (la.kind == 28) {
			Get();
			tok = t; 
			Expression(out defaultValue, true, true);
			if (!incoming) {
			 SemErr(tok, "out-parameters cannot have default-value expressions");
			 defaultValue = null;
			}
			
		}
	}

	void IteratorName(out IToken id) {
		NoUSIdent(out id);
	}

	void Formals(bool incoming, bool allowGhostKeyword, bool allowNewKeyword, List<Formal> formals) {
		Contract.Requires(cce.NonNullElements(formals));
		IToken id;
		Type ty;
		bool isGhost;
		bool isOld;
		Expression defaultValue;
		bool isNameOnly;
		
		Expect(81);
		if (StartOf(13)) {
			GIdentType(allowGhostKeyword, allowNewKeyword, incoming, out id, out ty, out isGhost, out isOld, out isNameOnly);
			ParameterDefaultValue(incoming, out defaultValue);
			formals.Add(new Formal(id, id.val, ty, incoming, isGhost, defaultValue, isOld, isNameOnly)); 
			while (la.kind == 25) {
				Get();
				GIdentType(allowGhostKeyword, allowNewKeyword, incoming, out id, out ty, out isGhost, out isOld, out isNameOnly);
				ParameterDefaultValue(incoming, out defaultValue);
				formals.Add(new Formal(id, id.val, ty, incoming, isGhost, defaultValue, isOld, isNameOnly)); 
			}
		}
		Expect(82);
	}

	void IteratorSpec(List<FrameExpression/*!*/>/*!*/ reads, List<FrameExpression/*!*/>/*!*/ mod, List<Expression/*!*/> decreases,
List<AttributedExpression/*!*/>/*!*/ req, List<AttributedExpression/*!*/>/*!*/ ens,
List<AttributedExpression/*!*/>/*!*/ yieldReq, List<AttributedExpression/*!*/>/*!*/ yieldEns,
ref Attributes readsAttrs, ref Attributes modAttrs, ref Attributes decrAttrs) {
		while (!(StartOf(14))) {SynErr(198); Get();}
		while (StartOf(15)) {
			if (la.kind == 71) {
				ReadsClause(reads, false, false, false);
			} else if (la.kind == 70) {
				ModifiesClause(ref mod, ref modAttrs, false, false);
			} else if (la.kind == 72 || la.kind == 73 || la.kind == 114) {
				bool isYield = false; 
				if (la.kind == 114) {
					Get();
					isYield = true; 
				}
				if (la.kind == 72) {
					RequiresClause((isYield?yieldReq:req), !isYield);
				} else if (la.kind == 73) {
					EnsuresClause((isYield?yieldEns:ens), false);
				} else SynErr(199);
			} else {
				DecreasesClause(decreases, ref decrAttrs, false, false);
			}
		}
	}

	void BlockStmt(out BlockStmt/*!*/ block, out IToken bodyStart, out IToken bodyEnd) {
		Contract.Ensures(Contract.ValueAtReturn(out block) != null);
		List<Statement/*!*/> body = new List<Statement/*!*/>();
		
		Expect(77);
		bodyStart = t; 
		while (StartOf(16)) {
			Stmt(body);
		}
		Expect(78);
		bodyEnd = t;
		block = new BlockStmt(bodyStart, bodyEnd, body); 
	}

	void TypeVariableName(out IToken id) {
		NoUSIdent(out id);
	}

	void Variance(out TypeParameter.TPVarianceSyntax variance) {
		variance = TypeParameter.TPVarianceSyntax.NonVariant_Strict;  // never used; here just to please the C# compiler
		
		if (la.kind == 89) {
			Get();
			variance = TypeParameter.TPVarianceSyntax.Covariant_Permissive; 
		} else if (la.kind == 111) {
			Get();
			variance = TypeParameter.TPVarianceSyntax.Covariant_Strict; 
		} else if (la.kind == 112) {
			Get();
			variance = TypeParameter.TPVarianceSyntax.NonVariant_Permissive; 
		} else if (la.kind == 113) {
			Get();
			variance = TypeParameter.TPVarianceSyntax.Contravariance; 
		} else SynErr(200);
	}

	void TPCharOption(ref TypeParameter.TypeParameterCharacteristics characteristics) {
		if (la.kind == 86) {
			Get();
			characteristics.EqualitySupport = TypeParameter.EqualitySupportValue.Required; 
		} else if (la.kind == 2) {
			Get();
			if (t.val == "0") {
			 characteristics.AutoInit = Microsoft.Dafny.Type.AutoInitInfo.CompilableValue;
			} else if (t.val == "00") {
			 if (characteristics.AutoInit != Microsoft.Dafny.Type.AutoInitInfo.CompilableValue) {
			   characteristics.AutoInit = Microsoft.Dafny.Type.AutoInitInfo.Nonempty;
			 }
			} else {
			 SemErr(t, "unexpected type parameter option - should be == or 0 or !new");
			}
			
		} else if (la.kind == 112) {
			Get();
			Expect(107);
			characteristics.ContainsNoReferenceTypes = true; 
		} else SynErr(201);
	}

	void MethodFunctionName(out IToken id) {
		NoUSIdentOrDigits(out id);
	}

	void KType(ref ExtremePredicate.KType kType) {
		Expect(79);
		if (la.kind == 10) {
			Get();
			kType = ExtremePredicate.KType.Nat; 
		} else if (la.kind == 12) {
			Get();
			kType = ExtremePredicate.KType.ORDINAL; 
		} else SynErr(202);
		Expect(80);
	}

	void MethodSpec(bool isGhost, List<AttributedExpression> req, List<FrameExpression> mod, List<AttributedExpression> ens,
List<Expression> decreases, ref Attributes decAttrs, ref Attributes modAttrs, string caption, bool performThisDeprecatedCheck) {
		Contract.Requires(cce.NonNullElements(req));
		Contract.Requires(cce.NonNullElements(mod));
		Contract.Requires(cce.NonNullElements(ens));
		Contract.Requires(cce.NonNullElements(decreases));
		
		while (!(StartOf(17))) {SynErr(203); Get();}
		while (StartOf(18)) {
			if (la.kind == 70) {
				ModifiesClause(ref mod, ref modAttrs, false, performThisDeprecatedCheck);
			} else if (la.kind == 72) {
				RequiresClause(req, true);
			} else if (la.kind == 73) {
				EnsuresClause(ens, false);
			} else {
				DecreasesClause(decreases, ref decAttrs, !isGhost, false);
			}
		}
	}

	void DividedBlockStmt(out DividedBlockStmt body, out IToken bodyStart, out IToken bodyEnd) {
		Contract.Ensures(Contract.ValueAtReturn(out body) != null);
		List<Statement> bodyInit = new List<Statement>();
		IToken separatorTok = null;
		List<Statement> bodyProper = new List<Statement>();
		
		Expect(77);
		bodyStart = t; 
		while (StartOf(16)) {
			Stmt(bodyInit);
		}
		if (la.kind == 107) {
			Get();
			separatorTok = t; 
			Expect(33);
			while (StartOf(16)) {
				Stmt(bodyProper);
			}
		}
		Expect(78);
		bodyEnd = t; 
		body = new DividedBlockStmt(bodyStart, bodyEnd, bodyInit, separatorTok, bodyProper); 
	}

	void RequiresClause(List<AttributedExpression> req, bool allowLabel) {
		Expect(72);
		IToken lbl = null;
		Attributes attrs = null;
		Expression e;
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (IsLabel(allowLabel)) {
			LabelName(out lbl);
			Expect(24);
		}
		Expression(out e, false, false);
		OldSemi();
		req.Add(new AttributedExpression(e, lbl == null ? null : new AssertLabel(lbl, lbl.val), attrs)); 
	}

	void LabelName(out IToken id) {
		NoUSIdentOrDigits(out id);
	}

	void EnsuresClause(List<AttributedExpression> ens, bool allowLambda) {
		Expect(73);
		Expression e;
		Attributes attrs = null;
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		Expression(out e, false, allowLambda);
		OldSemi();
		ens.Add(new AttributedExpression(e, attrs)); 
	}

	void ModifiesClause(ref List<FrameExpression> mod, ref Attributes attrs,
bool allowLambda, bool performThisDeprecatedCheck) {
		Expect(70);
		FrameExpression fe;
		mod = mod ?? new List<FrameExpression>();
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		FrameExpression(out fe, false, allowLambda);
		Util.AddFrameExpression(mod, fe, performThisDeprecatedCheck, errors); 
		while (la.kind == 25) {
			Get();
			FrameExpression(out fe, false, allowLambda);
			Util.AddFrameExpression(mod, fe, performThisDeprecatedCheck, errors); 
		}
		OldSemi();
	}

	void FrameExpression(out FrameExpression fe, bool allowLemma, bool allowLambda) {
		Contract.Ensures(Contract.ValueAtReturn(out fe) != null);
		Expression/*!*/ e;
		IToken/*!*/ id;
		string fieldName = null;
		IToken feTok = null;
		fe = dummyFrameExpr;
		
		if (StartOf(4)) {
			Expression(out e, allowLemma, allowLambda);
			feTok = e.tok; 
			if (la.kind == 32) {
				FrameField(out id);
				fieldName = id.val;  feTok = id; 
			}
			fe = new FrameExpression(feTok, e, fieldName); 
		} else if (la.kind == 32) {
			FrameField(out id);
			fieldName = id.val; 
			fe = new FrameExpression(id, new ImplicitThisExpr(id), fieldName); 
		} else SynErr(204);
	}

	void DecreasesClause(List<Expression> decreases, ref Attributes attrs,
bool allowWildcard, bool allowLambda) {
		Expect(45);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		DecreasesList(decreases, allowWildcard, allowLambda);
		OldSemi();
	}

	void DecreasesList(List<Expression> decreases, bool allowWildcard, bool allowLambda) {
		Expression e; 
		PossiblyWildExpression(out e, allowLambda, allowWildcard);
		decreases.Add(e); 
		while (la.kind == 25) {
			Get();
			PossiblyWildExpression(out e, allowLambda, allowWildcard);
			decreases.Add(e); 
		}
		if (allowWildcard && decreases.Count > 1 && decreases.Exists(e => e is WildcardExpr)) {
		 SemErr(e.tok, "A 'decreases' clause that contains '*' is not allowed to contain any other expressions");
		}
		
	}

	void ReadsClause(List<FrameExpression/*!*/>/*!*/ reads,
    bool allowLemma, bool allowLambda, bool allowWild) {
		Expect(71);
		Attributes attrs = null;
		FrameExpression fe;
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		PossiblyWildFrameExpression(out fe, allowLemma, allowLambda, allowWild);
		reads.Add(fe); 
		while (la.kind == 25) {
			Get();
			PossiblyWildFrameExpression(out fe, allowLemma, allowLambda, allowWild);
			reads.Add(fe); 
		}
		if (allowWild && reads.Count > 1 && reads.Exists(fe => fe.E is WildcardExpr)) {
		 SemErr(fe.tok, "A 'reads' clause that contains '*' is not allowed to contain any other expressions");
		}
		
		OldSemi();
	}

	void PossiblyWildFrameExpression(out FrameExpression fe, bool allowLemma,
bool allowLambda, bool allowWild) {
		Contract.Ensures(Contract.ValueAtReturn(out fe) != null); fe = dummyFrameExpr; 
		if (la.kind == 89) {
			Get();
			fe = new FrameExpression(t, new WildcardExpr(t), null);
			if (!allowWild) {
			  SemErr(t, "A '*' frame expression is not permitted here");
			}
			
		} else if (StartOf(19)) {
			FrameExpression(out fe, allowLemma, allowLambda);
		} else SynErr(205);
	}

	void InvariantClause(List<AttributedExpression> invariants) {
		Expect(46);
		Attributes attrs = null;
		Expression e;
		
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		Expression(out e, false, true);
		invariants.Add(new AttributedExpression(e, attrs)); 
		OldSemi();
	}

	void OptGenericInstantiation(out List<Type> gt, bool inExpressionContext) {
		gt = null; 
		if (IsGenericInstantiation(inExpressionContext)) {
			gt = new List<Type>(); 
			GenericInstantiation(gt);
		}
	}

	void TupleType(out Type ty, out IToken tok, out List<Type> tupleArgTypes, out List<bool> argumentGhostness) {
		Expect(81);
		tok = t;
		ty = null; // To keep compiler happy
		tupleArgTypes = new List<Type>();
		var isGhost = false;
		argumentGhostness = new List<bool>();
		
		if (StartOf(20)) {
			if (la.kind == 74) {
				Get();
				isGhost = true; 
			}
			Type(out ty);
			tupleArgTypes.Add(ty); argumentGhostness.Add(isGhost); 
			while (la.kind == 25) {
				Get();
				isGhost = false; 
				if (la.kind == 74) {
					Get();
					isGhost = true; 
				}
				Type(out ty);
				tupleArgTypes.Add(ty); argumentGhostness.Add(isGhost); 
			}
		}
		Expect(82);
		if (tupleArgTypes.Count == 1 && !isGhost) {
		 // just return the type 'ty'
		} else {
		 var dims = tupleArgTypes.Count;
		 var tmp = theBuiltIns.TupleType(tok, dims, true, argumentGhostness);  // make sure the tuple type exists
		 ty = new UserDefinedType(tok, BuiltIns.TupleTypeName(argumentGhostness), dims == 0 ? null : tupleArgTypes);
		}
		
	}

	void NamedType(out Type ty, out IToken tok, bool inExpressionContext) {
		Expression e; 
		NameSegmentForTypeName(out e, inExpressionContext);
		tok = t; 
		while (la.kind == 31) {
			Get();
			TypeNameOrCtorSuffix(out tok);
			List<Type> typeArgs; 
			OptGenericInstantiation(out typeArgs, inExpressionContext);
			e = new ExprDotName(tok, e, tok.val, typeArgs); 
		}
		ty = new UserDefinedType(e.tok, e); 
	}

	void NameSegmentForTypeName(out Expression e, bool inExpressionContext) {
		IToken id;  List<Type> typeArgs; 
		Ident(out id);
		OptGenericInstantiation(out typeArgs, inExpressionContext);
		e = new NameSegment(id, id.val, typeArgs);
		
	}

	void GenericInstantiation(List<Type> gt) {
		Contract.Requires(cce.NonNullElements(gt)); Type/*!*/ ty; 
		Expect(83);
		Type(out ty);
		gt.Add(ty); 
		while (la.kind == 25) {
			Get();
			Type(out ty);
			gt.Add(ty); 
		}
		Expect(84);
	}

	void FunctionSpec(List<AttributedExpression/*!*/>/*!*/ reqs, List<FrameExpression/*!*/>/*!*/ reads, List<AttributedExpression/*!*/>/*!*/ ens, List<Expression/*!*/> decreases) {
		Contract.Requires(cce.NonNullElements(reqs));
		Contract.Requires(cce.NonNullElements(reads));
		Contract.Requires(decreases == null || cce.NonNullElements(decreases));
		Attributes attrs = null;
		
		while (!(StartOf(21))) {SynErr(206); Get();}
		while (StartOf(22)) {
			if (la.kind == 72) {
				RequiresClause(reqs, true);
			} else if (la.kind == 71) {
				ReadsClause(reads, false, false, true);
			} else if (la.kind == 73) {
				EnsuresClause(ens, false);
			} else {
				if (decreases == null) {
				 SemErr(t, "'decreases' clauses are meaningless for least and greatest predicates, so they are not allowed");
				 decreases = new List<Expression/*!*/>();
				}
				
				DecreasesClause(decreases, ref attrs, false, false);
			}
		}
	}

	void FunctionBody(out Expression/*!*/ e, out IToken bodyStart, out IToken bodyEnd, out IToken/*?*/ byMethodTok, out BlockStmt/*?*/ byMethodBody) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null); e = dummyExpr;
		byMethodTok = null; byMethodBody = null;
		
		Expect(77);
		bodyStart = t; 
		Expression(out e, true, true);
		Expect(78);
		bodyEnd = t; 
		if (la.kind == 43) {
			Get();
			Expect(67);
			byMethodTok = t; 
			BlockStmt(out byMethodBody, out _, out _);
		}
	}

	void PossiblyWildExpression(out Expression e, bool allowLambda, bool allowWild) {
		Contract.Ensures(Contract.ValueAtReturn(out e)!=null);
		e = dummyExpr; 
		if (la.kind == 89) {
			Get();
			e = new WildcardExpr(t);
			if (!allowWild) {
			 SemErr(e.tok, "A '*' expression is not allowed here");
			}
			
		} else if (StartOf(4)) {
			Expression(out e, false, allowLambda);
		} else SynErr(207);
	}

	void FrameField(out IToken id) {
		Expect(32);
		IdentOrDigits(out id);
	}

	void IdentOrDigits(out IToken id) {
		id = Token.NoToken; 
		if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			Ident(out id);
		} else if (la.kind == 2) {
			Get();
			id = t; 
		} else SynErr(208);
	}

	void Stmt(List<Statement/*!*/>/*!*/ ss) {
		Statement/*!*/ s;
		
		OneStmt(out s);
		ss.Add(s); 
	}

	void OneStmt(out Statement/*!*/ s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		s = dummyStmt;  /* to please the compiler */
		BlockStmt bs;
		IToken bodyStart, bodyEnd;
		
		while (!(StartOf(23))) {SynErr(209); Get();}
		switch (la.kind) {
		case 77: {
			BlockStmt(out bs, out bodyStart, out bodyEnd);
			s = bs; 
			break;
		}
		case 1: case 2: case 3: case 4: case 22: case 23: case 26: case 49: case 50: case 81: case 118: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: {
			UpdateStmt(out s);
			break;
		}
		case 62: case 74: {
			VarDeclStatement(out s);
			break;
		}
		case 117: {
			ReturnStmt(out s);
			break;
		}
		case 119: {
			IfStmt(out s);
			break;
		}
		case 120: {
			WhileStmt(out s);
			break;
		}
		case 121: {
			ForLoopStmt(out s);
			break;
		}
		case 36: {
			AssertStmt(out s, false);
			break;
		}
		case 35: {
			AssumeStmt(out s);
			break;
		}
		case 116: {
			BreakStmt(out s);
			break;
		}
		case 37: {
			CalcStmt(out s);
			break;
		}
		case 94: {
			ExpectStmt(out s);
			break;
		}
		case 124: {
			ForallStmt(out s);
			break;
		}
		case 115: {
			LabeledStmt(out s);
			break;
		}
		case 122: {
			MatchStmt(out s);
			break;
		}
		case 125: {
			ModifyStmt(out s);
			break;
		}
		case 123: {
			PrintStmt(out s);
			break;
		}
		case 93: {
			RevealStmt(out s);
			break;
		}
		case 92: {
			SkeletonStmt(out s);
			break;
		}
		case 114: {
			YieldStmt(out s);
			break;
		}
		default: SynErr(210); break;
		}
	}

	void UpdateStmt(out Statement/*!*/ s) {
		List<Expression> lhss = new List<Expression>();
		List<AssignmentRhs> rhss = new List<AssignmentRhs>();
		Expression e;
		AssignmentRhs r;
		IToken x = Token.NoToken;
		IToken endTok = Token.NoToken;
		Attributes attrs = null;
		IToken suchThatAssume = null;
		Expression suchThat = null;
		IToken keywordToken = null;
		Expression exceptionExpr = null;
		
		if (StartOf(24)) {
			Lhs(out e);
			x = e.tok; 
			if (la.kind == 33 || la.kind == 76) {
				while (la.kind == 76) {
					Attribute(ref attrs);
				}
				Expect(33);
				endTok = t; rhss.Add(new ExprRhs(e, attrs)); 
			} else if (StartOf(25)) {
				lhss.Add(e); 
				while (la.kind == 25) {
					Get();
					Lhs(out e);
					lhss.Add(e); 
				}
				if (la.kind == 28) {
					Get();
					x = t; 
					Rhs(out r);
					rhss.Add(r); 
					while (la.kind == 25) {
						Get();
						Rhs(out r);
						rhss.Add(r); 
					}
				} else if (la.kind == 29) {
					Get();
					x = t; 
					if (la.kind == _assume) {
						Expect(35);
						suchThatAssume = t; 
					}
					Expression(out suchThat, false, true);
				} else if (la.kind == 118) {
					Get();
					x = t; 
					if (IsAssumeTypeKeyword(la)) {
						if (la.kind == 94) {
							Get();
						} else if (la.kind == 36) {
							Get();
						} else if (la.kind == 35) {
							Get();
						} else SynErr(211);
						keywordToken = t; 
					}
					Expression(out exceptionExpr, false, false);
					while (la.kind == 25) {
						Get();
						Rhs(out r);
						rhss.Add(r); 
					}
				} else SynErr(212);
				Expect(33);
				endTok = t; 
			} else if (la.kind == 24) {
				Get();
				SemErr(t, "invalid statement (did you forget the 'label' keyword?)"); 
			} else SynErr(213);
		} else if (la.kind == 118) {
			Get();
			x = t; 
			if (IsAssumeTypeKeyword(la)) {
				if (la.kind == 94) {
					Get();
				} else if (la.kind == 36) {
					Get();
				} else if (la.kind == 35) {
					Get();
				} else SynErr(214);
				keywordToken = t; 
			}
			Expression(out exceptionExpr, false, false);
			while (la.kind == 25) {
				Get();
				Rhs(out r);
				rhss.Add(r); 
			}
			Expect(33);
			endTok = t; 
		} else SynErr(215);
		if (suchThat != null) {
		 s = new AssignSuchThatStmt(x, endTok, lhss, suchThat, suchThatAssume, null);
		} else if (exceptionExpr != null) {
		 s = new AssignOrReturnStmt(x, endTok, lhss, exceptionExpr, keywordToken, rhss);
		} else {
		 if (lhss.Count == 0 && rhss.Count == 0) {
		   s = new BlockStmt(x, endTok, new List<Statement>()); // error, give empty statement
		 } else {
		   s = new UpdateStmt(x, endTok, lhss, rhss);
		 }
		}
		
	}

	void VarDeclStatement(out Statement/*!*/ s) {
		IToken x = null, assignTok = null;  bool isGhost = false;
		LocalVariable d;
		AssignmentRhs r;
		List<LocalVariable> lhss = new List<LocalVariable>();
		List<AssignmentRhs> rhss = new List<AssignmentRhs>();
		IToken suchThatAssume = null;
		Expression suchThat = null;
		IToken keywordToken = null;
		Expression exceptionExpr = null;
		Attributes attrs = null;
		IToken endTok;
		s = dummyStmt;
		
		if (la.kind == 74) {
			Get();
			isGhost = true;  x = t; 
		}
		Expect(62);
		if (!isGhost) { x = t; } 
		if (!IsPatternDecl()) {
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			LocalIdentTypeOptional(out d, isGhost);
			lhss.Add(d); d.Attributes = attrs; attrs = null; 
			while (la.kind == 25) {
				Get();
				while (la.kind == 76) {
					Attribute(ref attrs);
				}
				LocalIdentTypeOptional(out d, isGhost);
				lhss.Add(d); d.Attributes = attrs; attrs = null; 
			}
			if (StartOf(26)) {
				if (la.kind == 28) {
					Get();
					assignTok = t; 
					Rhs(out r);
					rhss.Add(r); 
					while (la.kind == 25) {
						Get();
						Rhs(out r);
						rhss.Add(r); 
					}
				} else if (la.kind == 29 || la.kind == 76) {
					while (la.kind == 76) {
						Attribute(ref attrs);
					}
					Expect(29);
					assignTok = t; 
					if (la.kind == _assume) {
						Expect(35);
						suchThatAssume = t; 
					}
					Expression(out suchThat, false, true);
				} else {
					Get();
					assignTok = t; 
					if (IsAssumeTypeKeyword(la)) {
						if (la.kind == 94) {
							Get();
						} else if (la.kind == 36) {
							Get();
						} else if (la.kind == 35) {
							Get();
						} else SynErr(216);
						keywordToken = t; 
					}
					Expression(out exceptionExpr, false, false);
					while (la.kind == 25) {
						Get();
						Rhs(out r);
						rhss.Add(r); 
					}
				}
			}
			while (!(la.kind == 0 || la.kind == 33)) {SynErr(217); Get();}
			Expect(33);
			endTok = t; 
			ConcreteUpdateStatement update;
			var lhsExprs = new List<Expression>();
			if (isGhost || (rhss.Count == 0 && exceptionExpr == null && suchThat == null)) { // explicitly ghost or no init
			 foreach (var lhs in lhss) {
			   lhsExprs.Add(new IdentifierExpr(lhs.Tok, lhs.Name));
			 }
			} else { // not explicitly ghost, but with init - so auto-ghost
			 foreach (var lhs in lhss) {
			   lhsExprs.Add(new AutoGhostIdentifierExpr(lhs.Tok, lhs.Name));
			 }
			}
			if (suchThat != null) {
			 update = new AssignSuchThatStmt(assignTok, endTok, lhsExprs, suchThat, suchThatAssume, attrs);
			} else if (exceptionExpr != null) {
			 update = new AssignOrReturnStmt(assignTok, endTok, lhsExprs, exceptionExpr, keywordToken, rhss);
			} else if (rhss.Count == 0) {
			 update = null;
			} else {
			 update = new UpdateStmt(assignTok, endTok, lhsExprs, rhss);
			}
			s = new VarDeclStmt(x, endTok, lhss, update);
			
		} else if (StartOf(27)) {
			CasePattern<LocalVariable> pat;
			Expression e = dummyExpr;
			IToken id = t;
			
			CasePatternLocal(out pat, isGhost);
			if (la.kind == 28) {
				Get();
			} else if (la.kind == 29 || la.kind == 76) {
				while (la.kind == 76) {
					Attribute(ref attrs);
				}
				Expect(29);
				SemErr(pat.tok, "LHS of assign-such-that expression must be variables, not general patterns"); 
			} else SynErr(218);
			Expression(out e, false, true);
			Expect(33);
			s = new VarDeclPattern(e.tok, e.tok, pat, e, isGhost); 
		} else SynErr(219);
	}

	void ReturnStmt(out Statement/*!*/ s) {
		Expect(117);
		IToken returnTok = t;
		List<AssignmentRhs> rhss = null;
		AssignmentRhs r;
		
		if (StartOf(28)) {
			Rhs(out r);
			rhss = new List<AssignmentRhs>();
			rhss.Add(r);
			
			while (la.kind == 25) {
				Get();
				Rhs(out r);
				rhss.Add(r); 
			}
		}
		Expect(33);
		s = new ReturnStmt(returnTok, t, rhss);
		
	}

	void IfStmt(out Statement/*!*/ ifStmt) {
		Contract.Ensures(Contract.ValueAtReturn(out ifStmt) != null); IToken/*!*/ x;
		Expression guard = null;  IToken guardEllipsis = null;  bool isBindingGuard = false;
		BlockStmt/*!*/ thn;
		BlockStmt/*!*/ bs;
		Statement/*!*/ s;
		Statement els = null;
		Attributes attrs = null;
		Attributes elsattrs = null;
		IToken bodyStart, bodyEnd, endTok;
		List<GuardedAlternative> alternatives;
		ifStmt = dummyIfStmt;  // to please the compiler
		bool usesOptionalBraces;
		
		Expect(119);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (IsAlternative()) {
			AlternativeBlock(true, out alternatives, out usesOptionalBraces, out endTok);
			ifStmt = new AlternativeStmt(x, endTok, alternatives, usesOptionalBraces, attrs); 
		} else if (StartOf(29)) {
			if (IsBindingGuard()) {
				BindingGuard(out guard, true);
				isBindingGuard = true; 
			} else if (StartOf(30)) {
				Guard(out guard);
			} else {
				Get();
				guardEllipsis = t; 
			}
			BlockStmt(out thn, out bodyStart, out bodyEnd);
			endTok = thn.EndTok; 
			if (la.kind == 40) {
				Get();
				if (la.kind == 119) {
					IfStmt(out s);
					els = s; endTok = s.EndTok; 
				} else if (la.kind == 76 || la.kind == 77) {
					while (la.kind == 76) {
						Attribute(ref elsattrs);
					}
					BlockStmt(out bs, out bodyStart, out bodyEnd);
					els = bs; endTok = bs.EndTok; 
				} else SynErr(220);
			}
			if (els != null && !(els is IfStmt)) {
			els.Attributes = elsattrs;
			}
			if (guardEllipsis != null) {
			 ifStmt = new SkeletonStatement(new IfStmt(x, endTok, isBindingGuard, guard, thn, els), guardEllipsis, null);
			} else {
			 ifStmt = new IfStmt(x, endTok, isBindingGuard, guard, thn, els, attrs);
			}
			
		} else SynErr(221);
	}

	void WhileStmt(out Statement stmt) {
		Contract.Ensures(Contract.ValueAtReturn(out stmt) != null); IToken x;
		Expression guard = null;  IToken guardEllipsis = null;
		Attributes attrs = null;
		List<AttributedExpression> invariants = new List<AttributedExpression>();
		List<Expression> decreases = new List<Expression>();
		Attributes decAttrs = null;
		Attributes modAttrs = null;
		List<FrameExpression> mod = null;
		BlockStmt body = null;  IToken bodyEllipsis = null;
		IToken bodyStart = null, bodyEnd = null, endTok = Token.NoToken;
		List<GuardedAlternative> alternatives;
		stmt = dummyStmt;  // to please the compiler
		bool isDirtyLoop = true;
		bool usesOptionalBraces;
		
		Expect(120);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (IsLoopSpec() || IsAlternative()) {
			LoopSpec(invariants, decreases, ref mod, ref decAttrs, ref modAttrs);
			AlternativeBlock(false, out alternatives, out usesOptionalBraces, out endTok);
			stmt = new AlternativeLoopStmt(x, endTok, invariants, new Specification<Expression>(decreases, decAttrs), new Specification<FrameExpression>(mod, modAttrs), alternatives, usesOptionalBraces, attrs); 
		} else if (StartOf(29)) {
			if (StartOf(30)) {
				Guard(out guard);
				Contract.Assume(guard == null || cce.Owner.None(guard)); 
			} else {
				Get();
				guardEllipsis = t; 
			}
			LoopSpec(invariants, decreases, ref mod, ref decAttrs, ref modAttrs);
			if (la.kind == _lbrace) {
				BlockStmt(out body, out bodyStart, out bodyEnd);
				endTok = body.EndTok; isDirtyLoop = false; 
			} else if (la.kind == _ellipsis) {
				Expect(92);
				bodyEllipsis = t; endTok = t; isDirtyLoop = false; 
			} else if (StartOf(31)) {
			} else SynErr(222);
			if (guardEllipsis != null || bodyEllipsis != null) {
			 if (mod != null) {
			   SemErr(mod[0].E.tok, "'modifies' clauses are not allowed on refining loops");
			 }
			 if (body == null && !isDirtyLoop) {
			   body = new BlockStmt(x, endTok, new List<Statement>());
			 }
			 stmt = new WhileStmt(x, endTok, guard, invariants, new Specification<Expression>(decreases, decAttrs), new Specification<FrameExpression>(null, null), body, attrs);
			 stmt = new SkeletonStatement(stmt, guardEllipsis, bodyEllipsis);
			} else {
			 // The following statement protects against crashes in case of parsing errors
			 if (body == null && !isDirtyLoop) {
			   body = new BlockStmt(x, endTok, new List<Statement>());
			 }
			 stmt = new WhileStmt(x, endTok, guard, invariants, new Specification<Expression>(decreases, decAttrs), new Specification<FrameExpression>(mod, modAttrs), body, attrs);
			}
			
		} else SynErr(223);
	}

	void ForLoopStmt(out Statement stmt) {
		Contract.Ensures(Contract.ValueAtReturn(out stmt) != null);
		IToken x;
		BoundVar loopIndex;
		Expression start;
		Expression end = null;
		bool goingUp = true;
		
		Attributes attrs = null;
		
		List<AttributedExpression> invariants = new List<AttributedExpression>();
		List<Expression> decreases = new List<Expression>();
		Attributes decAttrs = null;
		Attributes modAttrs = null;
		List<FrameExpression> mod = null;
		
		BlockStmt body = null;
		IToken bodyStart = null, bodyEnd = null, endTok = Token.NoToken;
		stmt = dummyStmt;  // to please the compiler
		bool isDirtyLoop = true;
		
		Expect(121);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		IdentTypeOptional(out loopIndex);
		Expect(28);
		Expression(out start, false, false);
		ForLoopDirection(out goingUp);
		if (StartOf(4)) {
			Expression(out end, false, false);
		} else if (la.kind == 89) {
			Get();
		} else SynErr(224);
		LoopSpec(invariants, decreases, ref mod, ref decAttrs, ref modAttrs);
		if (la.kind == _lbrace) {
			BlockStmt(out body, out bodyStart, out bodyEnd);
			endTok = body.EndTok; isDirtyLoop = false; 
		} else if (StartOf(31)) {
		} else SynErr(225);
		if (body == null && !isDirtyLoop) {
		 body = new BlockStmt(x, endTok, new List<Statement>());
		}
		stmt = new ForLoopStmt(x, endTok, loopIndex, start, end, goingUp,
		 invariants, new Specification<Expression>(decreases, decAttrs), new Specification<FrameExpression>(mod, modAttrs), body, attrs);
		
	}

	void AssertStmt(out Statement/*!*/ s, bool inExprContext) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null); IToken/*!*/ x;
		Expression e = dummyExpr; Attributes attrs = null;
		IToken dotdotdot = null;
		BlockStmt proof = null;
		IToken proofStart, proofEnd;
		IToken lbl = null;
		
		Expect(36);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(4)) {
			if (IsLabel(!inExprContext)) {
				LabelName(out lbl);
				Expect(24);
			}
			Expression(out e, false, true);
			if (la.kind == 43) {
				Get();
				BlockStmt(out proof, out proofStart, out proofEnd);
			} else if (la.kind == 33) {
				Get();
			} else SynErr(226);
		} else if (la.kind == 92) {
			Get();
			dotdotdot = t; 
			Expect(33);
		} else SynErr(227);
		if (dotdotdot != null) {
		 s = new SkeletonStatement(new AssertStmt(x, t, new LiteralExpr(x, true), null, null, attrs), dotdotdot, null);
		} else {
		 s = new AssertStmt(x, t, e, proof, lbl == null ? null : new AssertLabel(lbl, lbl.val), attrs);
		}
		
	}

	void AssumeStmt(out Statement/*!*/ s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null); IToken/*!*/ x;
		Expression e = dummyExpr; Attributes attrs = null;
		IToken dotdotdot = null;
		
		Expect(35);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(4)) {
			Expression(out e, false, true);
		} else if (la.kind == 92) {
			Get();
			dotdotdot = t; 
		} else SynErr(228);
		Expect(33);
		if (dotdotdot != null) {
		 s = new SkeletonStatement(new AssumeStmt(x, t, new LiteralExpr(x, true), attrs), dotdotdot, null);
		} else {
		 s = new AssumeStmt(x, t, e, attrs);
		}
		
	}

	void BreakStmt(out Statement/*!*/ s) {
		Expect(116);
		IToken x = t;
		IToken id = null;
		int breakCount = 1;
		IToken label = null;
		
		if (StartOf(8)) {
			LabelName(out id);
			label = id; 
		} else if (la.kind == 33 || la.kind == 116) {
			while (la.kind == 116) {
				Get();
				breakCount++; 
			}
		} else SynErr(229);
		while (!(la.kind == 0 || la.kind == 33)) {SynErr(230); Get();}
		Expect(33);
		s = label != null ?
		new BreakStmt(x, t, label) :
		new BreakStmt(x, t, breakCount); 
	}

	void CalcStmt(out Statement s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		IToken x;
		Attributes attrs = null;
		CalcStmt.CalcOp op, userSuppliedOp = null, resOp = Microsoft.Dafny.CalcStmt.DefaultOp;
		var lines = new List<Expression>();
		var hints = new List<BlockStmt>();
		CalcStmt.CalcOp stepOp;
		var stepOps = new List<CalcStmt.CalcOp>();
		Expression e;
		IToken opTok;
		IToken danglingOperator = null;
		
		Expect(37);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(32)) {
			CalcOp(out opTok, out userSuppliedOp);
			if (userSuppliedOp.ResultOp(userSuppliedOp) == null) { // guard against non-transitive calcOp (like !=)
			 SemErr(opTok, "the main operator of a calculation must be transitive");
			} else {
			 resOp = userSuppliedOp;
			}
			
		}
		Expect(77);
		while (StartOf(4)) {
			Expression(out e, false, true);
			lines.Add(e); stepOp = null; danglingOperator = null; 
			Expect(33);
			if (StartOf(32)) {
				CalcOp(out opTok, out op);
				var maybeOp = resOp.ResultOp(op);
				if (maybeOp == null) {
				 SemErr(opTok, "this operator cannot continue this calculation");
				} else {
				 stepOp = op;
				 resOp = maybeOp;
				 danglingOperator = opTok;
				}
				
			}
			stepOps.Add(stepOp); 
			var subhints = new List<Statement>();
			IToken hintStart = la;  IToken hintEnd = hintStart;
			IToken t0, t1;
			BlockStmt subBlock; Statement subCalc;
			
			while (la.kind == _lbrace || la.kind == _calc) {
				if (la.kind == 77) {
					BlockStmt(out subBlock, out t0, out t1);
					hintEnd = subBlock.EndTok; subhints.Add(subBlock); 
				} else if (la.kind == 37) {
					CalcStmt(out subCalc);
					hintEnd = subCalc.EndTok; subhints.Add(subCalc); 
				} else SynErr(231);
			}
			var h = new BlockStmt(hintStart, hintEnd, subhints); // if the hint is empty, hintStart is the first token of the next line, but it doesn't matter because the block statement is just used as a container
			hints.Add(h);
			if (h.Body.Count != 0) { danglingOperator = null; }
			
		}
		Expect(78);
		if (danglingOperator != null) {
		 SemErr(danglingOperator, "a calculation cannot end with an operator");
		}
		if (lines.Count > 0) {
		 // Repeat the last line to create a dummy line for the dangling hint
		 lines.Add(lines[lines.Count - 1]);
		}
		s = new CalcStmt(x, t, userSuppliedOp, lines, hints, stepOps, attrs);
		
	}

	void ExpectStmt(out Statement/*!*/ s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null); IToken/*!*/ x;
		Expression e = dummyExpr; Expression m = null; Attributes attrs = null;
		IToken dotdotdot = null;
		
		Expect(94);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(4)) {
			Expression(out e, false, true);
		} else if (la.kind == 92) {
			Get();
			dotdotdot = t; 
		} else SynErr(232);
		if (la.kind == 25) {
			Get();
			Expression(out m, false, true);
		}
		Expect(33);
		if (dotdotdot != null) {
		 s = new SkeletonStatement(new ExpectStmt(x, t, new LiteralExpr(x, true), m, attrs), dotdotdot, null);
		} else {
		 s = new ExpectStmt(x, t, e, m, attrs);
		}
		
	}

	void ForallStmt(out Statement/*!*/ s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		IToken/*!*/ x = Token.NoToken;
		List<BoundVar> bvars = null;
		Attributes qattrs = null;
		Expression range = null;
		var ens = new List<AttributedExpression/*!*/>();
		BlockStmt block = null;
		IToken bodyStart, bodyEnd;
		IToken tok = Token.NoToken;
		
		Expect(124);
		x = t; tok = x; 
		if (la.kind == _openparen) {
			Expect(81);
			if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
				QuantifierDomain(out bvars, out qattrs, out range);
			}
			Expect(82);
		} else if (StartOf(33)) {
			if (IsIdentifier(la.kind)) {
				QuantifierDomain(out bvars, out qattrs, out range);
			}
		} else SynErr(233);
		if (bvars == null) { bvars = new List<BoundVar>(); }
		if (range == null) { range = new LiteralExpr(x, true); }
		
		while (la.kind == 73) {
			EnsuresClause(ens, true);
		}
		if (la.kind == _lbrace) {
			BlockStmt(out block, out bodyStart, out bodyEnd);
		}
		if (DafnyOptions.O.DisallowSoundnessCheating && block == null && 0 < ens.Count) {
		  SemErr(t, "a forall statement with an ensures clause must have a body");
		}
		
		if (block != null) {
		  tok = block.EndTok;
		}
		s = new ForallStmt(x, tok, bvars, qattrs, range, ens, block);
		
	}

	void LabeledStmt(out Statement s) {
		Expect(115);
		IToken id; 
		LabelName(out id);
		Expect(24);
		OneStmt(out s);
		s.Labels = new LList<Label>(new Label(id, id.val), s.Labels); 
	}

	void MatchStmt(out Statement/*!*/ s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		IToken x; Expression/*!*/ e; NestedMatchCaseStmt/*!*/ c;
		List<NestedMatchCaseStmt/*!*/> cases = new List<NestedMatchCaseStmt/*!*/>();
		bool usesOptionalBraces = false;
		Attributes attrs = null;
		
		Expect(122);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		Expression(out e, true, true);
		if (la.kind == _lbrace) {
			Expect(77);
			usesOptionalBraces = true; 
			while (la.kind == 38) {
				CaseStmt(out c);
				cases.Add(c); 
			}
			Expect(78);
		} else if (StartOf(31)) {
			while (la.kind == _case) {
				CaseStmt(out c);
				cases.Add(c); 
			}
		} else SynErr(234);
		s = new NestedMatchStmt(x, t, e, cases, usesOptionalBraces, attrs); 
	}

	void ModifyStmt(out Statement s) {
		IToken tok;  IToken endTok = Token.NoToken;
		Attributes attrs = null;
		FrameExpression fe;  var mod = new List<FrameExpression>();
		BlockStmt body = null;  IToken bodyStart;
		IToken ellipsisToken = null;
		
		Expect(125);
		tok = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (StartOf(19)) {
			FrameExpression(out fe, false, true);
			mod.Add(fe); 
			while (la.kind == 25) {
				Get();
				FrameExpression(out fe, false, true);
				mod.Add(fe); 
			}
		} else if (la.kind == 92) {
			Get();
			ellipsisToken = t; 
		} else SynErr(235);
		if (la.kind == 77) {
			BlockStmt(out body, out bodyStart, out endTok);
		} else if (la.kind == 33) {
			while (!(la.kind == 0 || la.kind == 33)) {SynErr(236); Get();}
			Get();
			endTok = t; 
		} else SynErr(237);
		s = new ModifyStmt(tok, endTok, mod, attrs, body);
		if (ellipsisToken != null) {
		 s = new SkeletonStatement(s, ellipsisToken, null);
		}
		
	}

	void PrintStmt(out Statement s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		IToken x;  Expression e;
		var args = new List<Expression>();
		
		Expect(123);
		x = t; 
		Expression(out e, false, true);
		args.Add(e); 
		while (la.kind == 25) {
			Get();
			Expression(out e, false, true);
			args.Add(e); 
		}
		Expect(33);
		s = new PrintStmt(x, t, args); 
	}

	void RevealStmt(out Statement s) {
		Contract.Ensures(Contract.ValueAtReturn(out s) != null);
		IToken x; Expression e; var es = new List<Expression>();
		
		Expect(93);
		x = t; 
		Expression(out e, false, true);
		es.Add(e); 
		while (la.kind == 25) {
			Get();
			Expression(out e, false, true);
			es.Add(e); 
		}
		Expect(33);
		s = new RevealStmt(x, t, es); 
	}

	void SkeletonStmt(out Statement s) {
		IToken dotdotdot; 
		Expect(92);
		dotdotdot = t; 
		Expect(33);
		s = new SkeletonStatement(dotdotdot, t); 
	}

	void YieldStmt(out Statement/*!*/ s) {
		Expect(114);
		IToken yieldTok = t;
		List<AssignmentRhs> rhss = null;
		AssignmentRhs r;
		
		if (StartOf(28)) {
			Rhs(out r);
			rhss = new List<AssignmentRhs>();
			rhss.Add(r);
			
			while (la.kind == 25) {
				Get();
				Rhs(out r);
				rhss.Add(r); 
			}
		}
		Expect(33);
		s = new YieldStmt(yieldTok, t, rhss);
		
	}

	void Rhs(out AssignmentRhs r) {
		Contract.Ensures(Contract.ValueAtReturn<AssignmentRhs>(out r) != null);
		IToken/*!*/ x, newToken;  Expression/*!*/ e;
		Type ty = new InferredTypeProxy();
		List<Expression> ee = null;
		List<ActualBinding> args = null;
		Expression arrayElementInit = null;
		List<Expression> display = null;
		r = dummyRhs;  // to please compiler
		Attributes attrs = null;
		
		if (la.kind == 107) {
			Get();
			newToken = t; 
			if (la.kind == 79) {
				NewArray(out ee, out arrayElementInit, out display);
			} else if (StartOf(5)) {
				TypeAndToken(out x, out ty, false);
				if (la.kind == 79 || la.kind == 81) {
					if (la.kind == 79) {
						NewArray(out ee, out arrayElementInit, out display);
					} else {
						x = null; args = new List<ActualBinding>(); 
						Get();
						if (StartOf(4)) {
							ActualBindings(args);
						}
						Expect(82);
					}
				}
			} else SynErr(238);
			if (ee != null) {
			 if (display != null) {
			   r = new TypeRhs(newToken, ty, ee[0], display);
			 } else {
			   r = new TypeRhs(newToken, ty, ee, arrayElementInit);
			 }
			} else if (args != null) {
			 r = new TypeRhs(newToken, ty, args);
			} else {
			 r = new TypeRhs(newToken, ty);
			}
			
		} else if (la.kind == 89) {
			Get();
			r = new HavocRhs(t); 
		} else if (StartOf(4)) {
			Expression(out e, false, true);
			r = new ExprRhs(e); 
		} else SynErr(239);
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		r.Attributes = attrs; 
	}

	void Lhs(out Expression e) {
		e = dummyExpr;  // the assignment is to please the compiler, the dummy value to satisfy contracts in the event of a parse error
		
		if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			NameSegment(out e);
			while (la.kind == 31 || la.kind == 79 || la.kind == 81) {
				Suffix(ref e);
			}
		} else if (StartOf(34)) {
			ConstAtomExpression(out e);
			Suffix(ref e);
			while (la.kind == 31 || la.kind == 79 || la.kind == 81) {
				Suffix(ref e);
			}
		} else SynErr(240);
	}

	void NewArray(out List<Expression> ee, out Expression arrayElementInit, out List<Expression> display ) {
		ee = new List<Expression>();
		arrayElementInit = null;
		display = null;
		IToken x;
		
		Expect(79);
		x = t; 
		if (la.kind == 80) {
			Get();
			Expect(79);
			display = new List<Expression>(); 
			if (StartOf(4)) {
				Expressions(display);
			}
			Expect(80);
			ee.Add(new LiteralExpr(x, display.Count));
			
		} else if (StartOf(4)) {
			Expressions(ee);
			Expect(80);
			var tmp = theBuiltIns.ArrayType(ee.Count, new IntType(), true);
			
			if (la.kind == 79 || la.kind == 81) {
				if (la.kind == 81) {
					Get();
					Expression(out arrayElementInit, true, true);
					Expect(82);
				} else {
					Get();
					if (ee.Count > 1) {
					 SemErr(t, "An initializing element display is allowed only for 1-dimensional arrays");
					}
					display = new List<Expression>();
					
					if (StartOf(4)) {
						Expressions(display);
					}
					Expect(80);
				}
			}
		} else SynErr(241);
		if (ee.Count == 0) {
		 // an error occurred while parsing, but we still want to make sure to return a nonempty "ee"
		 ee.Add(new LiteralExpr(x, 0));
		}
		
	}

	void ActualBindings(List<ActualBinding> bindings) {
		ActualBinding binding; 
		ActualBinding(out binding);
		bindings.Add(binding); 
		while (la.kind == 25) {
			Get();
			ActualBinding(out binding);
			bindings.Add(binding); 
		}
	}

	void Expressions(List<Expression> args) {
		Expression e; 
		Expression(out e, true, true);
		args.Add(e); 
		while (la.kind == 25) {
			Get();
			Expression(out e, true, true);
			args.Add(e); 
		}
	}

	void CasePatternLocal(out CasePattern<LocalVariable> pat, bool isGhost) {
		IToken id; List<CasePattern<LocalVariable>> arguments;
		LocalVariable local;
		pat = null;
		
		if (IsIdentParen()) {
			Ident(out id);
			Expect(81);
			arguments = new List<CasePattern<LocalVariable>>(); 
			if (StartOf(27)) {
				CasePatternLocal(out pat, isGhost);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					CasePatternLocal(out pat, isGhost);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			pat = new CasePattern<LocalVariable>(id, id.val, arguments); 
		} else if (la.kind == 81) {
			Get();
			id = t;
			arguments = new List<CasePattern<LocalVariable>>();
			
			if (StartOf(27)) {
				CasePatternLocal(out pat, isGhost);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					CasePatternLocal(out pat, isGhost);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			string ctor = BuiltIns.TupleTypeCtorName(arguments.Count);  //use the TupleTypeCtors
			pat = new CasePattern<LocalVariable>(id, ctor, arguments);
			
		} else if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			LocalIdentTypeOptional(out local, isGhost);
			pat = new CasePattern<LocalVariable>(local.Tok, local);
			
		} else SynErr(242);
		if (pat == null) {
		 pat = new CasePattern<LocalVariable>(t, "_ParseError", null);
		}
		
	}

	void AlternativeBlock(bool allowBindingGuards, out List<GuardedAlternative> alternatives, out bool usesOptionalBraces, out IToken endTok) {
		alternatives = new List<GuardedAlternative>();
		endTok = null;
		usesOptionalBraces = false;
		GuardedAlternative alt;
		
		if (la.kind == 77) {
			Get();
			usesOptionalBraces = true; 
			while (la.kind == 38) {
				AlternativeBlockCase(allowBindingGuards, out alt);
				alternatives.Add(alt); 
			}
			Expect(78);
		} else if (la.kind == 38) {
			AlternativeBlockCase(allowBindingGuards, out alt);
			alternatives.Add(alt); 
			while (la.kind == _case) {
				AlternativeBlockCase(allowBindingGuards, out alt);
				alternatives.Add(alt); 
			}
		} else SynErr(243);
		endTok = t; 
	}

	void BindingGuard(out Expression e, bool allowLambda) {
		var bvars = new List<BoundVar>();
		BoundVar bv;  IToken x;
		Attributes attrs = null;
		Expression body;
		
		IdentTypeOptional(out bv);
		bvars.Add(bv); x = bv.tok; 
		while (la.kind == 25) {
			Get();
			IdentTypeOptional(out bv);
			bvars.Add(bv); 
		}
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		Expect(29);
		Expression(out body, true, allowLambda);
		e = new ExistsExpr(x, bvars, null, body, attrs); 
	}

	void Guard(out Expression e) {
		Expression/*!*/ ee;  e = null; 
		if (la.kind == 89) {
			Get();
			e = null; 
		} else if (IsParenStar()) {
			Expect(81);
			Expect(89);
			Expect(82);
			e = null; 
		} else if (StartOf(4)) {
			Expression(out ee, true, true);
			e = ee; 
		} else SynErr(244);
	}

	void AlternativeBlockCase(bool allowBindingGuards, out GuardedAlternative alt) {
		IToken x;
		Expression e; bool isBindingGuard;
		List<Statement> body;
		Attributes attrs = null;
		
		Expect(38);
		x = t; isBindingGuard = false; e = dummyExpr; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (allowBindingGuards && IsBindingGuard()) {
			BindingGuard(out e, false );
			isBindingGuard = true; 
		} else if (StartOf(4)) {
			Expression(out e, true, false);
		} else SynErr(245);
		Expect(34);
		body = new List<Statement>(); 
		while (!(StartOf(35))) {SynErr(246); Get();}
		while (IsNotEndOfCase()) {
			Stmt(body);
			while (!(StartOf(35))) {SynErr(247); Get();}
		}
		alt = new GuardedAlternative(x, isBindingGuard, e, body, attrs); 
	}

	void LoopSpec(List<AttributedExpression> invariants, List<Expression> decreases, ref List<FrameExpression> mod, ref Attributes decAttrs, ref Attributes modAttrs) {
		while (la.kind == 45 || la.kind == 46 || la.kind == 70) {
			if (la.kind == 46) {
				while (!(la.kind == 0 || la.kind == 46)) {SynErr(248); Get();}
				InvariantClause(invariants);
			} else if (la.kind == 45) {
				while (!(la.kind == 0 || la.kind == 45)) {SynErr(249); Get();}
				DecreasesClause(decreases, ref decAttrs, true, true);
			} else {
				while (!(la.kind == 0 || la.kind == 70)) {SynErr(250); Get();}
				ModifiesClause(ref mod, ref modAttrs, true, false);
			}
		}
	}

	void ForLoopDirection(out bool goingUp) {
		goingUp = true; 
		Expect(1);
		if (t.val == "downto") {
		 goingUp = false;
		} else if (t.val != "to") {
		 SemErr(t, "Expected 'to' or 'downto'");
		}
		
	}

	void ExtendedPattern(out ExtendedPattern pat) {
		IToken id; List<ExtendedPattern> arguments;
		Expression lit; BoundVar bv;
		pat = null;
		
		if (la.kind == 81) {
			Get();
			id = t;
			arguments = new List<ExtendedPattern>(); 
			if (StartOf(36)) {
				ExtendedPattern(out pat);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					ExtendedPattern(out pat);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			theBuiltIns.TupleType(id, arguments.Count, true);
			//use the TupleTypeCtors
			string ctor = BuiltIns.TupleTypeCtorName(arguments.Count);
			pat = new IdPattern(id, ctor, arguments);
			
		} else if (IsIdentParen()) {
			Ident(out id);
			arguments = new List<ExtendedPattern>(); 
			Expect(81);
			if (StartOf(36)) {
				ExtendedPattern(out pat);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					ExtendedPattern(out pat);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			pat = new IdPattern(id, id.val, arguments); 
		} else if (StartOf(37)) {
			PossiblyNegatedLiteralExpr(out lit);
			pat = new LitPattern(lit.tok, lit); 
		} else if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			IdentTypeOptional(out bv);
			pat = new IdPattern(bv.tok, bv.Name, bv.SyntacticType, null); 
		} else SynErr(251);
		if (pat == null) {
		 pat = new IdPattern(t, "_ParseError", null);
		}
		
	}

	void PossiblyNegatedLiteralExpr(out Expression e) {
		BigInteger n; BaseTypes.BigDec d;
		e = dummyExpr;
		
		if (la.kind == 113) {
			Get();
			var x = t; 
			if (la.kind == 2 || la.kind == 3) {
				Nat(out n);
				e = new NegationExpression(x, new LiteralExpr(t, n)); 
			} else if (la.kind == 4) {
				Dec(out d);
				e = new NegationExpression(x, new LiteralExpr(t, d)); 
			} else SynErr(252);
		} else if (StartOf(38)) {
			LiteralExpression(out e);
		} else SynErr(253);
	}

	void CaseStmt(out NestedMatchCaseStmt/*!*/ c) {
		Contract.Ensures(Contract.ValueAtReturn(out c) != null);
		IToken/*!*/ x;
		ExtendedPattern/*!*/ pat = null;
		var body = new List<Statement/*!*/>();
		Attributes attrs = null;
		
		Expect(38);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		ExtendedPattern(out pat);
		
		Expect(34);
		while (!(StartOf(35))) {SynErr(254); Get();}
		while (IsNotEndOfCase()) {
			Stmt(body);
			while (!(StartOf(35))) {SynErr(255); Get();}
		}
		c = new NestedMatchCaseStmt(x, pat, body, attrs); 
	}

	void QuantifierDomain(out List<BoundVar> bvars, out Attributes attrs, out Expression range) {
		bvars = new List<BoundVar>();
		BoundVar/*!*/ bv;
		attrs = null;
		range = null;
		
		IdentTypeOptional(out bv);
		bvars.Add(bv); 
		while (la.kind == 25) {
			Get();
			IdentTypeOptional(out bv);
			bvars.Add(bv); 
		}
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (la.kind == _verticalbar) {
			Expect(26);
			Expression(out range, true, true);
		}
	}

	void CalcOp(out IToken x, out CalcStmt.CalcOp/*!*/ op) {
		var binOp = BinaryExpr.Opcode.Eq; // Returns Eq if parsing fails because it is compatible with any other operator
		Expression k = null;
		x = null;
		
		switch (la.kind) {
		case 86: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Eq; 
			if (la.kind == 126) {
				Get();
				Expect(79);
				Expression(out k, true, true);
				Expect(80);
			}
			break;
		}
		case 83: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Lt; 
			break;
		}
		case 84: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Gt; 
			break;
		}
		case 127: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Le; 
			break;
		}
		case 128: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Ge; 
			break;
		}
		case 87: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Neq; 
			break;
		}
		case 88: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Neq; 
			break;
		}
		case 129: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Le; 
			break;
		}
		case 130: {
			Get();
			x = t;  binOp = BinaryExpr.Opcode.Ge; 
			break;
		}
		case 131: case 132: {
			EquivOp();
			x = t;  binOp = BinaryExpr.Opcode.Iff; 
			break;
		}
		case 133: case 134: {
			ImpliesOp();
			x = t;  binOp = BinaryExpr.Opcode.Imp; 
			break;
		}
		case 135: case 136: {
			ExpliesOp();
			x = t;  binOp = BinaryExpr.Opcode.Exp; 
			break;
		}
		default: SynErr(256); break;
		}
		if (k == null) {
		 op = new Microsoft.Dafny.CalcStmt.BinaryCalcOp(binOp);
		} else {
		 op = new Microsoft.Dafny.CalcStmt.TernaryCalcOp(k);
		}
		
	}

	void EquivOp() {
		if (la.kind == 131) {
			Get();
		} else if (la.kind == 132) {
			Get();
		} else SynErr(257);
	}

	void ImpliesOp() {
		if (la.kind == 133) {
			Get();
		} else if (la.kind == 134) {
			Get();
		} else SynErr(258);
	}

	void ExpliesOp() {
		if (la.kind == 135) {
			Get();
		} else if (la.kind == 136) {
			Get();
		} else SynErr(259);
	}

	void AndOp() {
		if (la.kind == 137) {
			Get();
		} else if (la.kind == 138) {
			Get();
		} else SynErr(260);
	}

	void OrOp() {
		if (la.kind == 139) {
			Get();
		} else if (la.kind == 140) {
			Get();
		} else SynErr(261);
	}

	void NegOp() {
		if (la.kind == 112) {
			Get();
		} else if (la.kind == 141) {
			Get();
		} else SynErr(262);
	}

	void Forall() {
		if (la.kind == 124) {
			Get();
		} else if (la.kind == 142) {
			Get();
		} else SynErr(263);
	}

	void Exists() {
		if (la.kind == 143) {
			Get();
		} else if (la.kind == 144) {
			Get();
		} else SynErr(264);
	}

	void QSep() {
		if (la.kind == 27) {
			Get();
		} else if (la.kind == 30) {
			Get();
		} else SynErr(265);
	}

	void EquivExpression(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1; 
		ImpliesExpliesExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
		while (IsEquivOp()) {
			EquivOp();
			x = t; 
			ImpliesExpliesExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
			e0 = new BinaryExpr(x, BinaryExpr.Opcode.Iff, e0, e1); 
		}
	}

	void ImpliesExpliesExpression(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1; 
		LogicalExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
		if (IsImpliesOp() || IsExpliesOp()) {
			if (la.kind == 133 || la.kind == 134) {
				ImpliesOp();
				x = t; 
				ImpliesExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, BinaryExpr.Opcode.Imp, e0, e1); 
			} else if (la.kind == 135 || la.kind == 136) {
				ExpliesOp();
				x = t; 
				LogicalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, BinaryExpr.Opcode.Exp, e1, e0); 
				while (IsExpliesOp()) {
					ExpliesOp();
					x = t; 
					LogicalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, BinaryExpr.Opcode.Exp, e1, e0);
					
				}
				if (IsImpliesOp()) {
					ImpliesOp();
					SemErr(t, "Ambiguous use of ==> and <==. Use parentheses to disambiguate."); 
				}
			} else SynErr(266);
		}
	}

	void LogicalExpression(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1;
		Expression first;
		e0 = dummyExpr; /* mute the warning */
		
		if (la.kind == 137 || la.kind == 138) {
			AndOp();
			x = t; 
			RelationalExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
			first = e0; 
			while (IsAndOp()) {
				AndOp();
				x = t; 
				RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, BinaryExpr.Opcode.And, e0, e1); 
			}
			if (IsOrOp()) {
				OrOp();
				SemErr(t, "Ambiguous use of && and ||. Use parentheses to disambiguate."); 
			}
			if (e0 == first) {
			 // There was only one conjunct. To make sure that the type checker still checks it to
			 // be a boolean, we conjoin "true" to its left.
			 e0 = new BinaryExpr(x, BinaryExpr.Opcode.And, new LiteralExpr(x, true), e0);
			}
			
		} else if (la.kind == 139 || la.kind == 140) {
			OrOp();
			x = t; 
			RelationalExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
			first = e0; 
			while (IsOrOp()) {
				OrOp();
				x = t; 
				RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, BinaryExpr.Opcode.Or, e0, e1); 
			}
			if (IsAndOp()) {
				AndOp();
				SemErr(t, "Ambiguous use of && and ||. Use parentheses to disambiguate."); 
			}
			if (e0 == first) {
			 // There was only one disjunct. To make sure that the type checker still checks it to
			 // be a boolean, we disjoin [sic] "false" to its left.
			 e0 = new BinaryExpr(x, BinaryExpr.Opcode.Or, new LiteralExpr(x, false), e0);
			}
			
		} else if (StartOf(39)) {
			RelationalExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
			if (IsAndOp() || IsOrOp()) {
				if (la.kind == 137 || la.kind == 138) {
					AndOp();
					x = t; 
					RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, BinaryExpr.Opcode.And, e0, e1); 
					while (IsAndOp()) {
						AndOp();
						x = t; 
						RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
						e0 = new BinaryExpr(x, BinaryExpr.Opcode.And, e0, e1); 
					}
					if (IsOrOp()) {
						OrOp();
						SemErr(t, "Ambiguous use of && and ||. Use parentheses to disambiguate."); 
					}
				} else if (la.kind == 139 || la.kind == 140) {
					OrOp();
					x = t; 
					RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, BinaryExpr.Opcode.Or, e0, e1); 
					while (IsOrOp()) {
						OrOp();
						x = t; 
						RelationalExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
						e0 = new BinaryExpr(x, BinaryExpr.Opcode.Or, e0, e1); 
					}
					if (IsAndOp()) {
						AndOp();
						SemErr(t, "Ambiguous use of && and ||. Use parentheses to disambiguate."); 
					}
				} else SynErr(267);
			}
		} else SynErr(268);
	}

	void ImpliesExpression(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1; 
		LogicalExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
		if (IsImpliesOp()) {
			ImpliesOp();
			x = t; 
			ImpliesExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
			e0 = new BinaryExpr(x, BinaryExpr.Opcode.Imp, e0, e1); 
		}
		if (IsExpliesOp()) {
			ExpliesOp();
			SemErr(t, "Ambiguous use of ==> and <==. Use parentheses to disambiguate."); 
		}
	}

	void RelationalExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		IToken x = null;  Expression e0, e1 = null;  BinaryExpr.Opcode op;
		List<Expression> chain = null;
		List<BinaryExpr.Opcode> ops = null;
		List<IToken> opLocs = null;
		List<Expression/*?*/> prefixLimits = null;
		Expression k;
		int kind = 0;  // 0 ("uncommitted") indicates chain of ==, possibly with one !=
		              // 1 ("ascending")   indicates chain of ==, <, <=, possibly with one !=
		              // 2 ("descending")  indicates chain of ==, >, >=, possibly with one !=
		              // 3 ("illegal")     indicates illegal chain
		              // 4 ("disjoint")    indicates chain of disjoint set operators
		bool hasSeenNeq = false;
		
		ShiftTerm(out e0, allowLemma, allowLambda, allowBitwiseOps);
		e = e0; 
		if (IsRelOp()) {
			RelOp(out x, out op, out k);
			ShiftTerm(out e1, allowLemma, allowLambda, allowBitwiseOps);
			if (k == null) {
			 e = new BinaryExpr(x, op, e0, e1);
			} else {
			 Contract.Assert(op == BinaryExpr.Opcode.Eq || op == BinaryExpr.Opcode.Neq);
			 e = new TernaryExpr(x, op == BinaryExpr.Opcode.Eq ? TernaryExpr.Opcode.PrefixEqOp : TernaryExpr.Opcode.PrefixNeqOp, k, e0, e1);
			}
			
			while (IsRelOp()) {
				if (chain == null) {
				 chain = new List<Expression>();
				 ops = new List<BinaryExpr.Opcode>();
				 opLocs = new List<IToken>();
				 prefixLimits = new List<Expression>();
				 chain.Add(e0); ops.Add(op); opLocs.Add(x); prefixLimits.Add(k); chain.Add(e1);
				 switch (op) {
				   case BinaryExpr.Opcode.Eq:
				     kind = 0;  break;
				   case BinaryExpr.Opcode.Neq:
				     kind = 0;  hasSeenNeq = true;  break;
				   case BinaryExpr.Opcode.Lt:
				   case BinaryExpr.Opcode.Le:
				     kind = 1;  break;
				   case BinaryExpr.Opcode.Gt:
				   case BinaryExpr.Opcode.Ge:
				     kind = 2;  break;
				   case BinaryExpr.Opcode.Disjoint:
				     kind = 4;  break;
				   default:
				     kind = 3;  break;
				 }
				}
				
				RelOp(out x, out op, out k);
				switch (op) {
				 case BinaryExpr.Opcode.Eq:
				   if (kind != 0 && kind != 1 && kind != 2) { SemErr(x, "chaining not allowed from the previous operator"); kind = 3; }
				   break;
				 case BinaryExpr.Opcode.Neq:
				   if (hasSeenNeq) { SemErr(x, "a chain cannot have more than one != operator"); kind = 3; }
				   else if (kind != 0 && kind != 1 && kind != 2) { SemErr(x, "this operator cannot continue this chain"); kind = 3; }
				   hasSeenNeq = true;  break;
				 case BinaryExpr.Opcode.Lt:
				 case BinaryExpr.Opcode.Le:
				   if (kind == 0) { kind = 1; }
				   else if (kind != 1) { SemErr(x, "this operator chain cannot continue with an ascending operator"); kind = 3; }
				   break;
				 case BinaryExpr.Opcode.Gt:
				 case BinaryExpr.Opcode.Ge:
				   if (kind == 0) { kind = 2; }
				   else if (kind != 2) { SemErr(x, "this operator chain cannot continue with a descending operator"); kind = 3; }
				   break;
				 case BinaryExpr.Opcode.Disjoint:
				   if (kind != 4) { SemErr(x, "can only chain disjoint (!!) with itself."); kind = 3; }
				   break;
				 default:
				   SemErr(x, "this operator cannot be part of a chain");
				   kind = 3;  break;
				}
				
				ShiftTerm(out e1, allowLemma, allowLambda, allowBitwiseOps);
				ops.Add(op); opLocs.Add(x); prefixLimits.Add(k); chain.Add(e1);
				
			}
		}
		if (chain != null && kind != 3) {
		 e = new ChainingExpression(opLocs[0], chain, ops, opLocs, prefixLimits);
		}
		
	}

	void ShiftTerm(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null);
		IToken x = Token.NoToken;  Expression e1;  BinaryExpr.Opcode op = BinaryExpr.Opcode.LeftShift/*(dummy)*/;
		
		Term(out e0, allowLemma, allowLambda, allowBitwiseOps);
		while (IsShiftOp()) {
			if (la.kind == 83) {
				Get();
				x = t;  op = BinaryExpr.Opcode.LeftShift; 
				Expect(83);
				x.val = "<<";  Contract.Assert(t.pos == x.pos + 1); 
			} else if (la.kind == 84) {
				Get();
				x = t;  op = BinaryExpr.Opcode.RightShift; 
				Expect(84);
				x.val = "<<";  Contract.Assert(t.pos == x.pos + 1); 
			} else SynErr(269);
			Term(out e1, allowLemma, allowLambda, allowBitwiseOps);
			e0 = new BinaryExpr(x, op, e0, e1); 
		}
	}

	void RelOp(out IToken/*!*/ x, out BinaryExpr.Opcode op, out Expression k) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null);
		x = Token.NoToken;  op = BinaryExpr.Opcode.Add/*(dummy)*/;
		IToken y;
		k = null;
		
		switch (la.kind) {
		case 86: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Eq; 
			if (la.kind == 126) {
				Get();
				Expect(79);
				Expression(out k, true, true);
				Expect(80);
			}
			break;
		}
		case 83: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Lt; 
			break;
		}
		case 84: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Gt; 
			break;
		}
		case 127: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Le; 
			break;
		}
		case 128: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Ge; 
			break;
		}
		case 87: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Neq; 
			if (la.kind == 126) {
				Get();
				Expect(79);
				Expression(out k, true, true);
				Expect(80);
			}
			break;
		}
		case 44: {
			Get();
			x = t;  op = BinaryExpr.Opcode.In; 
			break;
		}
		case 91: {
			Get();
			x = t;  op = BinaryExpr.Opcode.NotIn; 
			break;
		}
		case 112: {
			Get();
			x = t;  y = Token.NoToken; 
			if (la.val == "!") {
				Expect(112);
				y = t; 
			}
			if (y == Token.NoToken) {
			 SemErr(x, "invalid RelOp");
			} else if (y.pos != x.pos + 1) {
			 SemErr(x, "invalid RelOp (perhaps you intended \"!!\" with no intervening whitespace?)");
			} else {
			 x.val = "!!";
			 op = BinaryExpr.Opcode.Disjoint;
			}
			
			break;
		}
		case 88: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Neq; 
			break;
		}
		case 129: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Le; 
			break;
		}
		case 130: {
			Get();
			x = t;  op = BinaryExpr.Opcode.Ge; 
			break;
		}
		default: SynErr(270); break;
		}
	}

	void Term(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1;  BinaryExpr.Opcode op; 
		Factor(out e0, allowLemma, allowLambda, allowBitwiseOps);
		while (IsAddOp()) {
			AddOp(out x, out op);
			Factor(out e1, allowLemma, allowLambda, allowBitwiseOps);
			e0 = new BinaryExpr(x, op, e0, e1); 
		}
	}

	void Factor(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1;  BinaryExpr.Opcode op; 
		BitvectorFactor(out e0, allowLemma, allowLambda, allowBitwiseOps);
		while (IsMulOp()) {
			MulOp(out x, out op);
			BitvectorFactor(out e1, allowLemma, allowLambda, allowBitwiseOps);
			e0 = new BinaryExpr(x, op, e0, e1); 
		}
	}

	void AddOp(out IToken x, out BinaryExpr.Opcode op) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null); x = Token.NoToken;  op=BinaryExpr.Opcode.Add/*(dummy)*/; 
		if (la.kind == 111) {
			Get();
			x = t;  op = BinaryExpr.Opcode.Add; 
		} else if (la.kind == 113) {
			Get();
			x = t;  op = BinaryExpr.Opcode.Sub; 
		} else SynErr(271);
	}

	void BitvectorFactor(out Expression e0, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e0) != null); IToken/*!*/ x;  Expression/*!*/ e1;  BinaryExpr.Opcode op; 
		AsExpression(out e0, allowLemma, allowLambda, allowBitwiseOps);
		if (allowBitwiseOps && IsBitwiseOp()) {
			if (la.kind == 147) {
				op = BinaryExpr.Opcode.BitwiseAnd; 
				Get();
				x = t; 
				AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, op, e0, e1); 
				while (IsBitwiseAndOp()) {
					Expect(147);
					x = t; 
					AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, op, e0, e1); 
				}
				if (IsBitwiseOp()) {
					if (la.kind == 26) {
						Get();
					} else if (la.kind == 148) {
						Get();
					} else SynErr(272);
					SemErr(t, "Ambiguous use of &, |, ^. Use parentheses to disambiguate."); 
				}
			} else if (la.kind == 26) {
				op = BinaryExpr.Opcode.BitwiseOr; 
				Get();
				x = t; 
				AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, op, e0, e1); 
				while (IsBitwiseOrOp()) {
					Expect(26);
					x = t; 
					AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, op, e0, e1); 
				}
				if (IsBitwiseOp()) {
					if (la.kind == 148) {
						Get();
					} else if (la.kind == 147) {
						Get();
					} else SynErr(273);
					SemErr(t, "Ambiguous use of &, |, ^. Use parentheses to disambiguate."); 
				}
			} else if (la.kind == 148) {
				op = BinaryExpr.Opcode.BitwiseXor; 
				Get();
				x = t; 
				AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
				e0 = new BinaryExpr(x, op, e0, e1); 
				while (IsBitwiseXorOp()) {
					Expect(148);
					x = t; 
					AsExpression(out e1, allowLemma, allowLambda, allowBitwiseOps);
					e0 = new BinaryExpr(x, op, e0, e1); 
				}
				if (IsBitwiseOp()) {
					if (la.kind == 147) {
						Get();
					} else if (la.kind == 26) {
						Get();
					} else SynErr(274);
					SemErr(t, "Ambiguous use of &, |, ^. Use parentheses to disambiguate."); 
				}
			} else SynErr(275);
		}
	}

	void MulOp(out IToken x, out BinaryExpr.Opcode op) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null); x = Token.NoToken;  op = BinaryExpr.Opcode.Add/*(dummy)*/; 
		if (la.kind == 89) {
			Get();
			x = t;  op = BinaryExpr.Opcode.Mul; 
		} else if (la.kind == 145) {
			Get();
			x = t;  op = BinaryExpr.Opcode.Div; 
		} else if (la.kind == 146) {
			Get();
			x = t;  op = BinaryExpr.Opcode.Mod; 
		} else SynErr(276);
	}

	void AsExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		IToken tok; IToken x; Type toType; 
		UnaryExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
		while (IsAsOrIs()) {
			if (la.kind == 41) {
				Get();
				tok = t; 
				TypeAndToken(out x, out toType, true);
				e = new ConversionExpr(tok, e, toType); 
			} else if (la.kind == 42) {
				Get();
				tok = t; 
				TypeAndToken(out x, out toType, true);
				e = new TypeTestExpr(tok, e, toType); 
			} else SynErr(277);
		}
	}

	void UnaryExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		e = null; Contract.Ensures(Contract.ValueAtReturn(out e) != null); IToken/*!*/ x;  e = dummyExpr; 
		if (la.kind == 113) {
			Get();
			x = t; 
			UnaryExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
			e = new NegationExpression(x, e); 
		} else if (la.kind == 112 || la.kind == 141) {
			NegOp();
			x = t; 
			UnaryExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
			e = new UnaryOpExpr(x, UnaryOpExpr.Opcode.Not, e); 
		} else if (StartOf(40)) {
			PrimaryExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
		} else SynErr(278);
	}

	void PrimaryExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		e = null; 
		if (IsMapDisplay()) {
			MapDisplayExpr(out e);
			while (IsSuffix()) {
				Suffix(ref e);
			}
		} else if (IsSetDisplay()) {
			SetDisplayExpr(out e);
			while (IsSuffix()) {
				Suffix(ref e);
			}
		} else if (IsLambda(allowLambda)) {
			LambdaExpression(out e, allowLemma, allowBitwiseOps);
		} else if (StartOf(41)) {
			EndlessExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
		} else if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			NameSegment(out e);
			while (IsSuffix()) {
				Suffix(ref e);
			}
		} else if (la.kind == 19 || la.kind == 79) {
			SeqDisplayExpr(out e);
			while (IsSuffix()) {
				Suffix(ref e);
			}
		} else if (StartOf(34)) {
			ConstAtomExpression(out e);
			while (IsSuffix()) {
				Suffix(ref e);
			}
		} else SynErr(279);
	}

	void MapDisplayExpr(out Expression e) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		List<ExpressionPair/*!*/>/*!*/ elements= new List<ExpressionPair/*!*/>() ;
		e = dummyExpr;
		
		if (la.kind == 20) {
			Get();
		} else if (la.kind == 21) {
			Get();
		} else SynErr(280);
		IToken mapToken = t; 
		Expect(79);
		if (StartOf(4)) {
			MapLiteralExpressions(out elements);
		}
		e = new MapDisplayExpr(mapToken, mapToken.kind == _map, elements);
		Expect(80);
	}

	void Suffix(ref Expression e) {
		Contract.Requires(e != null); Contract.Ensures(e!=null);
		IToken id, x;
		Expression e0 = null;  Expression e1 = null;  Expression ee;  bool anyDots = false;
		List<Expression> multipleLengths = null; bool takeRest = false; // takeRest is relevant only if multipleLengths is non-null
		List<Expression> multipleIndices = null;
		List<Tuple<IToken, string, Expression>> updates;
		Expression v;
		
		if (la.kind == 31) {
			Get();
			if (la.kind == 81) {
				Get();
				x = t; updates = new List<Tuple<IToken, string, Expression>>(); 
				MemberBindingUpdate(out id, out v);
				updates.Add(Tuple.Create(id, id.val, v)); 
				while (la.kind == 25) {
					Get();
					MemberBindingUpdate(out id, out v);
					updates.Add(Tuple.Create(id, id.val, v)); 
				}
				Expect(82);
				e = new DatatypeUpdateExpr(x, e, updates); 
			} else if (StartOf(42)) {
				DotSuffix(out id, out x);
				if (x != null) {
				 // process id as a Suffix in its own right
				 e = new ExprDotName(id, e, id.val, null);
				 id = x;  // move to the next Suffix
				}
				IToken openParen = null;  List<Type> typeArgs = null;
				List<ActualBinding> args = null;
				IToken atLabel = null;
				
				if (IsGenericInstantiation(true)) {
					typeArgs = new List<Type>(); 
					GenericInstantiation(typeArgs);
					if (la.kind == 90) {
						AtCall(out atLabel, out openParen, out args);
					}
				} else if (la.kind == 126) {
					HashCall(id, out openParen, out typeArgs, out args);
				} else if (StartOf(43)) {
					if (la.kind == 90) {
						AtCall(out atLabel, out openParen, out args);
					}
				} else SynErr(281);
				e = new ExprDotName(id, e, id.val, typeArgs);
				if (openParen != null) {
				 e = new ApplySuffix(openParen, atLabel, e, args);
				} else {
				 Contract.Assert(atLabel == null);
				}
				
			} else SynErr(282);
		} else if (la.kind == 79) {
			Get();
			x = t; 
			if (StartOf(4)) {
				Expression(out ee, true, true);
				e0 = ee; 
				if (la.kind == 157) {
					Get();
					anyDots = true; 
					if (StartOf(4)) {
						Expression(out ee, true, true);
						e1 = ee; 
					}
				} else if (la.kind == 28) {
					Get();
					Expression(out ee, true, true);
					e1 = ee; 
				} else if (la.kind == 24) {
					Get();
					multipleLengths = new List<Expression>();
					multipleLengths.Add(e0);  // account for the Expression read before the colon
					takeRest = true;
					
					if (StartOf(4)) {
						Expression(out ee, true, true);
						multipleLengths.Add(ee); takeRest = false; 
						while (IsNonFinalColon()) {
							Expect(24);
							Expression(out ee, true, true);
							multipleLengths.Add(ee); 
						}
						if (la.kind == 24) {
							Get();
							takeRest = true; 
						}
					}
				} else if (la.kind == 25 || la.kind == 80) {
					while (la.kind == 25) {
						Get();
						Expression(out ee, true, true);
						if (multipleIndices == null) {
						 multipleIndices = new List<Expression>();
						 multipleIndices.Add(e0);
						}
						multipleIndices.Add(ee);
						
					}
				} else SynErr(283);
			} else if (la.kind == 157) {
				Get();
				anyDots = true; 
				if (StartOf(4)) {
					Expression(out ee, true, true);
					e1 = ee; 
				}
			} else SynErr(284);
			if (multipleIndices != null) {
			 e = new MultiSelectExpr(x, e, multipleIndices);
			 // make sure an array class with this dimensionality exists
			 var tmp = theBuiltIns.ArrayType(multipleIndices.Count, new IntType(), true);
			} else {
			 if (!anyDots && e0 == null) {
			   /* a parsing error occurred */
			   e0 = dummyExpr;
			 }
			 Contract.Assert(anyDots || e0 != null);
			 if (anyDots) {
			   //Contract.Assert(e0 != null || e1 != null);
			   e = new SeqSelectExpr(x, false, e, e0, e1);
			 } else if (multipleLengths != null) {
			   Expression prev = null;
			   List<Expression> seqs = new List<Expression>();
			    foreach (var len in multipleLengths) {
			      var end = prev == null ? len : new BinaryExpr(x, BinaryExpr.Opcode.Add, prev, len);
			      seqs.Add(new SeqSelectExpr(x, false, e, prev, end));
			      prev = end;
			    }
			   if (takeRest) {
			     seqs.Add(new SeqSelectExpr(x, false, e, prev, null));
			   }
			   e = new SeqDisplayExpr(x, seqs);
			 } else if (e1 == null) {
			   Contract.Assert(e0 != null);
			   e = new SeqSelectExpr(x, true, e, e0, null);
			 } else {
			   Contract.Assert(e0 != null);
			   e = new SeqUpdateExpr(x, e, e0, e1);
			 }
			}
			
			Expect(80);
		} else if (la.kind == 81) {
			Get();
			IToken openParen = t; var args = new List<ActualBinding>(); 
			if (StartOf(4)) {
				ActualBindings(args);
			}
			Expect(82);
			e = new ApplySuffix(openParen, null, e, args); 
		} else SynErr(285);
	}

	void SetDisplayExpr(out Expression e) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		IToken token = null;
		IToken x = null;
		e = dummyExpr;
		
		if (la.kind == 17 || la.kind == 18) {
			if (la.kind == 17) {
				Get();
			} else {
				Get();
			}
			token = t; 
		}
		if (la.kind == 77) {
			Get();
			token = token == null ? t : token;
			x = token;
			List<Expression> elements = new List<Expression/*!*/>();
			
			if (StartOf(4)) {
				Expressions(elements);
			}
			if (token.kind == _iset) {
			 e = new SetDisplayExpr(x, false, elements);
			} else if (token.kind == _multiset) {
			 e = new MultiSetDisplayExpr(x, elements);
			} else {
			 e = new SetDisplayExpr(x, true, elements);
			}
			
			Expect(78);
		} else if (la.kind == 81) {
			Get();
			x = t; 
			Expression(out e, true, true);
			if (token == null || token.kind != _multiset) {
			 SemErr(x, "A forming expression must be a multiset");
			}
			e = new MultiSetFormingExpr(x, e);
			
			Expect(82);
		} else SynErr(286);
	}

	void LambdaExpression(out Expression e, bool allowLemma, bool allowBitwiseOps) {
		IToken x = Token.NoToken;
		IToken id;  BoundVar bv;
		var bvs = new List<BoundVar>();
		var reads = new List<FrameExpression>();
		Expression req = null;
		Expression body = null;
		
		if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			WildIdent(out id, true);
			x = t; bvs.Add(new BoundVar(id, id.val, new InferredTypeProxy())); 
		} else if (la.kind == 81) {
			Get();
			x = t; 
			if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
				IdentTypeOptional(out bv);
				bvs.Add(bv); 
				while (la.kind == 25) {
					Get();
					IdentTypeOptional(out bv);
					bvs.Add(bv); 
				}
			}
			Expect(82);
		} else SynErr(287);
		LambdaSpec(ref reads, ref req);
		Expect(34);
		Expression(out body, allowLemma, true, allowBitwiseOps);
		e = new LambdaExpr(x, bvs, req, reads, body);
		theBuiltIns.CreateArrowTypeDecl(bvs.Count);
		
	}

	void EndlessExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Statement s;
		e = dummyExpr;
		
		switch (la.kind) {
		case 119: {
			IfExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
			break;
		}
		case 122: {
			MatchExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
			break;
		}
		case 124: case 142: case 143: case 144: {
			QuantifierExpression(out e, allowLemma, allowLambda);
			break;
		}
		case 16: case 17: {
			SetComprehensionExpr(out e, allowLemma, allowLambda, allowBitwiseOps);
			break;
		}
		case 35: case 36: case 37: case 93: case 94: {
			StmtInExpr(out s);
			Expression(out e, allowLemma, allowLambda, allowBitwiseOps);
			e = new StmtExpr(s.Tok, s, e); 
			break;
		}
		case 62: case 74: case 118: {
			LetExpression(out e, allowLemma, allowLambda, allowBitwiseOps);
			break;
		}
		case 20: case 21: {
			MapComprehensionExpr(out e, allowLemma, allowLambda, allowBitwiseOps);
			break;
		}
		default: SynErr(288); break;
		}
	}

	void NameSegment(out Expression e) {
		IToken id;
		IToken openParen = null; IToken atLabel = null;
		List<Type> typeArgs = null; List<ActualBinding> args = null;
		
		Ident(out id);
		if (IsGenericInstantiation(true)) {
			typeArgs = new List<Type>(); 
			GenericInstantiation(typeArgs);
			if (la.kind == 90) {
				AtCall(out atLabel, out openParen, out args);
			}
		} else if (la.kind == 126) {
			HashCall(id, out openParen, out typeArgs, out args);
		} else if (StartOf(43)) {
			if (la.kind == 90) {
				AtCall(out atLabel, out openParen, out args);
			}
		} else SynErr(289);
		e = new NameSegment(id, id.val, typeArgs);
		if (openParen != null) {
		 e = new ApplySuffix(openParen, atLabel, e, args);
		} else {
		 Contract.Assert(atLabel == null);
		}
		
	}

	void SeqDisplayExpr(out Expression e) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		IToken x = null;
		Type explicitTypeArg = null;
		Expression n, f;
		e = dummyExpr;
		
		if (la.kind == 19) {
			Get();
			x = t; 
			if (la.kind == 83) {
				var gt = new List<Type>(); 
				GenericInstantiation(gt);
				if (gt.Count > 1) {
				 SemErr("seq type expects only one type argument");
				} else {
				 explicitTypeArg = gt[0];
				}
				
			}
			Expect(81);
			Expression(out n, true, true);
			Expect(25);
			Expression(out f, true, true);
			Expect(82);
			e = new SeqConstructionExpr(x, explicitTypeArg, n, f); 
		} else if (la.kind == 79) {
			Get();
			List<Expression> elements = new List<Expression/*!*/>();
			x = t;
			
			
			if (StartOf(4)) {
				Expressions(elements);
			}
			e = new SeqDisplayExpr(x, elements);
			
			Expect(80);
		} else SynErr(290);
	}

	void ConstAtomExpression(out Expression e) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		IToken/*!*/ x;
		e = dummyExpr;
		
		switch (la.kind) {
		case 2: case 3: case 4: case 22: case 23: case 154: case 155: case 156: {
			LiteralExpression(out e);
			break;
		}
		case 149: {
			Get();
			e = new ThisExpr(t); 
			break;
		}
		case 150: {
			Get();
			x = t; 
			Expect(81);
			Expression(out e, true, true);
			Expect(82);
			e = new UnaryOpExpr(x, UnaryOpExpr.Opcode.Allocated, e); 
			break;
		}
		case 151: {
			Get();
			x = t; IToken atLabel = null; 
			if (la.kind == 90) {
				Get();
				LabelName(out atLabel);
			}
			Expect(81);
			Expression(out e, true, true);
			Expect(82);
			e = new FreshExpr(x, e, atLabel?.val); 
			break;
		}
		case 152: {
			Get();
			x = t; FrameExpression fe; var mod = new List<FrameExpression>(); IToken atLabel = null; 
			if (la.kind == 90) {
				Get();
				LabelName(out atLabel);
			}
			Expect(81);
			FrameExpression(out fe, false, false);
			mod.Add(fe); 
			while (la.kind == 25) {
				Get();
				FrameExpression(out fe, false, false);
				mod.Add(fe); 
			}
			Expect(82);
			e = new UnchangedExpr(x, mod, atLabel?.val); 
			break;
		}
		case 153: {
			Get();
			x = t; IToken atLabel = null; 
			if (la.kind == 90) {
				Get();
				LabelName(out atLabel);
			}
			Expect(81);
			Expression(out e, true, true);
			Expect(82);
			e = new OldExpr(x, e, atLabel?.val); 
			break;
		}
		case 26: {
			Get();
			x = t; 
			Expression(out e, true, true, false);
			e = new UnaryOpExpr(x, UnaryOpExpr.Opcode.Cardinality, e); 
			Expect(26);
			break;
		}
		case 81: {
			ParensExpression(out e);
			break;
		}
		default: SynErr(291); break;
		}
	}

	void LiteralExpression(out Expression e) {
		BigInteger n; BaseTypes.BigDec d;
		e = dummyExpr;
		
		switch (la.kind) {
		case 154: {
			Get();
			e = new LiteralExpr(t, false); 
			break;
		}
		case 155: {
			Get();
			e = new LiteralExpr(t, true); 
			break;
		}
		case 156: {
			Get();
			e = new LiteralExpr(t); 
			break;
		}
		case 2: case 3: {
			Nat(out n);
			e = new LiteralExpr(t, n); 
			break;
		}
		case 4: {
			Dec(out d);
			e = new LiteralExpr(t, d); 
			break;
		}
		case 22: {
			Get();
			e = new CharLiteralExpr(t, t.val.Substring(1, t.val.Length - 2)); 
			break;
		}
		case 23: {
			Get();
			bool isVerbatimString;
			string s = Util.RemoveParsedStringQuotes(t.val, out isVerbatimString);
			e = new StringLiteralExpr(t, s, isVerbatimString);
			
			break;
		}
		default: SynErr(292); break;
		}
	}

	void ParensExpression(out Expression e) {
		IToken x;
		var args = new List<ActualBinding>();
		
		Expect(81);
		x = t; 
		if (StartOf(4)) {
			TupleArgs(args);
		}
		Expect(82);
		if (args.Count == 1 && !args[0].IsGhost) {
		 if (args[0].FormalParameterName != null) {
		   SemErr(args[0].FormalParameterName, "binding not allowed in parenthesized expression");
		 }
		 e = new ParensExpression(x, args[0].Actual);
		} else {
		 // Compute the actual position of ghost arguments
		 var ghostness = new bool[args.Count];
		 for (var i = 0; i < args.Count; i++) {
		   ghostness[i] = false;
		 }
		 for (var i = 0; i < args.Count; i++) {
		   var arg = args[i];
		   if (arg.IsGhost) {
		     if (arg.FormalParameterName == null) {
		       ghostness[i] = true;
		     } else {
		       var success = int.TryParse(arg.FormalParameterName.val, out var index);
		       if (success && 0 <= index && index < args.Count) {
		         ghostness[index] = true;
		       }
		     }
		   }
		 }
		 var argumentGhostness = ghostness.ToList();
		 // make sure the corresponding tuple type exists
		 var tmp = theBuiltIns.TupleType(x, args.Count, true, argumentGhostness);
		 e = new DatatypeValue(x, BuiltIns.TupleTypeName(argumentGhostness), BuiltIns.TupleTypeCtorName(args.Count), args);
		}
		
	}

	void Nat(out BigInteger n) {
		n = BigInteger.Zero;
		string S;
		
		if (la.kind == 2) {
			Get();
			S = Util.RemoveUnderscores(t.val);
			try {
			 n = BigIntegerParser.Parse(S);
			} catch (System.FormatException) {
			 SemErr("incorrectly formatted number");
			 n = BigInteger.Zero;
			}
			
		} else if (la.kind == 3) {
			Get();
			S = Util.RemoveUnderscores(t.val.Substring(2));
			try {
			 // note: leading 0 required when parsing positive hex numbers
			 n = BigIntegerParser.Parse("0" + S, System.Globalization.NumberStyles.HexNumber);
			} catch (System.FormatException) {
			 SemErr("incorrectly formatted number");
			 n = BigInteger.Zero;
			}
			
		} else SynErr(293);
	}

	void Dec(out BaseTypes.BigDec d) {
		d = BaseTypes.BigDec.ZERO; 
		Expect(4);
		var S = Util.RemoveUnderscores(t.val);
		try {
		 d = BaseTypes.BigDec.FromString(S);
		} catch (System.FormatException) {
		 SemErr("incorrectly formatted number");
		 d = BaseTypes.BigDec.ZERO;
		}
		
	}

	void LambdaSpec(ref List<FrameExpression> reads, ref Expression req) {
		while (la.kind == 71 || la.kind == 72) {
			if (la.kind == 71) {
				ReadsClause(reads, true, false, true);
			} else {
				Get();
				Attributes attrs = null; 
				while (la.kind == 76) {
					Attribute(ref attrs);
				}
				Expression ee; 
				Expression(out ee, true, false);
				req = req == null ? ee : new BinaryExpr(req.tok, BinaryExpr.Opcode.And, req, ee); 
			}
		}
	}

	void TupleArgs(List<ActualBinding> args) {
		ActualBinding binding; bool isGhost = false; 
		if (la.kind == _ghost && !IsVar()) {
			Expect(74);
			isGhost = true; 
		}
		ActualBinding(out binding, isGhost);
		args.Add(binding); 
		while (la.kind == 25) {
			Get();
			isGhost = false; 
			if (la.kind == _ghost && !IsVar()) {
				Expect(74);
				isGhost = true; 
			}
			ActualBinding(out binding, isGhost);
			args.Add(binding); 
		}
	}

	void MapLiteralExpressions(out List<ExpressionPair> elements) {
		Expression/*!*/ d, r;
		elements = new List<ExpressionPair/*!*/>();
		
		Expression(out d, true, true);
		Expect(28);
		Expression(out r, true, true);
		elements.Add(new ExpressionPair(d,r)); 
		while (la.kind == 25) {
			Get();
			Expression(out d, true, true);
			Expect(28);
			Expression(out r, true, true);
			elements.Add(new ExpressionPair(d,r)); 
		}
	}

	void MapComprehensionExpr(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null);
		BoundVar bv;
		List<BoundVar> bvars = new List<BoundVar>();
		Expression range = null;
		Expression bodyLeft = null;
		Expression bodyRight;
		Attributes attrs = null;
		bool finite = true;
		
		if (la.kind == 20) {
			Get();
		} else if (la.kind == 21) {
			Get();
			finite = false; 
		} else SynErr(294);
		IToken mapToken = t; 
		IdentTypeOptional(out bv);
		bvars.Add(bv); 
		while (la.kind == 25) {
			Get();
			IdentTypeOptional(out bv);
			bvars.Add(bv); 
		}
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		if (la.kind == 26) {
			Get();
			Expression(out range, true, true, true);
		}
		QSep();
		Expression(out bodyRight, allowLemma, allowLambda, allowBitwiseOps);
		if (IsGets()) {
			bodyLeft = bodyRight; 
			Expect(28);
			Expression(out bodyRight, allowLemma, allowLambda, allowBitwiseOps || !finite);
		}
		if (bodyLeft == null && bvars.Count != 1) {
		 SemErr(t, "a map comprehension with more than one bound variable must have a term expression of the form 'Expr := Expr'");
		 e = dummyExpr;
		} else {
		 e = new MapComprehension(mapToken, finite, bvars, range ?? new LiteralExpr(mapToken, true), bodyLeft, bodyRight, attrs);
		}
		
	}

	void IfExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Expect(119);
		IToken x = t; Expression e0; Expression e1;
		bool isBindingGuard = false;
		e = dummyExpr;
		
		if (IsBindingGuard()) {
			BindingGuard(out e, true);
			isBindingGuard = true; 
		} else if (StartOf(4)) {
			Expression(out e, true, true);
		} else SynErr(295);
		Expect(39);
		Expression(out e0, true, true, true);
		Expect(40);
		Expression(out e1, allowLemma, allowLambda, allowBitwiseOps);
		if (isBindingGuard) {
		 var exists = (ExistsExpr) e;
		 var LHSs = new List<CasePattern<BoundVar>>();
		 foreach (var v in exists.BoundVars) {
		   LHSs.Add(new CasePattern<BoundVar>(e.tok, v));
		 }
		 e0 = new LetExpr(e.tok, LHSs, new List<Expression>() {
		   exists.Term }, e0, false);
		 }
		 e = new ITEExpr(x, isBindingGuard, e, e0, e1);
		
	}

	void MatchExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out e) != null); IToken/*!*/ x;  NestedMatchCaseExpr/*!*/ c;
		List<NestedMatchCaseExpr/*!*/> cases = new List<NestedMatchCaseExpr/*!*/>();
		bool usesOptionalBraces = false;
		
		Expect(122);
		x = t; 
		Expression(out e, allowLemma, allowLambda, allowBitwiseOps);
		if (la.kind == _lbrace) {
			Expect(77);
			usesOptionalBraces = true; 
			while (la.kind == 38) {
				CaseExpression(out c, true, true, allowBitwiseOps);
				cases.Add(c); 
			}
			Expect(78);
		} else if (StartOf(44)) {
			while (la.kind == _case) {
				CaseExpression(out c, allowLemma, allowLambda, allowBitwiseOps);
				cases.Add(c); 
			}
		} else SynErr(296);
		e = new NestedMatchExpr(x, e, cases, usesOptionalBraces); 
	}

	void QuantifierExpression(out Expression q, bool allowLemma, bool allowLambda) {
		Contract.Ensures(Contract.ValueAtReturn(out q) != null); IToken/*!*/ x = Token.NoToken;
		bool univ = false;
		List<BoundVar/*!*/> bvars;
		Attributes attrs;
		Expression range;
		Expression/*!*/ body;
		
		if (la.kind == 124 || la.kind == 142) {
			Forall();
			x = t;  univ = true; 
		} else if (la.kind == 143 || la.kind == 144) {
			Exists();
			x = t; 
		} else SynErr(297);
		QuantifierDomain(out bvars, out attrs, out range);
		QSep();
		Expression(out body, allowLemma, allowLambda);
		if (univ) {
		 q = new ForallExpr(x, bvars, range, body, attrs);
		} else {
		 q = new ExistsExpr(x, bvars, range, body, attrs);
		}
		
	}

	void SetComprehensionExpr(out Expression q, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out q) != null);
		BoundVar bv;
		List<BoundVar/*!*/> bvars = new List<BoundVar>();
		Expression range;
		Expression body = null;
		Attributes attrs = null;
		bool finite = true;
		
		if (la.kind == 16) {
			Get();
		} else if (la.kind == 17) {
			Get();
			finite = false; 
		} else SynErr(298);
		IToken setToken = t; 
		IdentTypeOptional(out bv);
		bvars.Add(bv); 
		while (la.kind == 25) {
			Get();
			IdentTypeOptional(out bv);
			bvars.Add(bv); 
		}
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		Expect(26);
		Expression(out range, allowLemma, allowLambda, allowBitwiseOps);
		if (IsQSep()) {
			QSep();
			Expression(out body, allowLemma, allowLambda, allowBitwiseOps || !finite);
		}
		if (body == null && bvars.Count != 1) {
		 SemErr(t, "a set comprehension with more than one bound variable must have a term expression");
		 q = dummyExpr;
		} else {
		 q = new SetComprehension(setToken, finite, bvars, range, body, attrs);
		}
		
	}

	void StmtInExpr(out Statement s) {
		s = dummyStmt; 
		if (la.kind == 36) {
			AssertStmt(out s, true);
		} else if (la.kind == 94) {
			ExpectStmt(out s);
		} else if (la.kind == 35) {
			AssumeStmt(out s);
		} else if (la.kind == 93) {
			RevealStmt(out s);
		} else if (la.kind == 37) {
			CalcStmt(out s);
		} else SynErr(299);
	}

	void LetExpression(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		e = dummyExpr; 
		if (la.kind == 62 || la.kind == 74) {
			LetExprWithLHS(out e, allowLemma, allowLambda, allowBitwiseOps);
		} else if (la.kind == 118) {
			LetExprWithoutLHS(out e, allowLemma, allowLambda, allowBitwiseOps);
		} else SynErr(300);
	}

	void LetExprWithLHS(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		IToken x = null;
		bool isGhost = false;
		var letLHSs = new List<CasePattern<BoundVar>>();
		var letRHSs = new List<Expression>();
		CasePattern<BoundVar> pat;
		bool exact = true;
		bool isLetOrFail = false;
		Attributes attrs = null;
		e = dummyExpr;
		
		if (la.kind == 74) {
			Get();
			isGhost = true;  x = t; 
		}
		Expect(62);
		if (!isGhost) { x = t; } 
		CasePattern(out pat);
		if (isGhost) { pat.Vars.Iter(bv => bv.IsGhost = true); }
		letLHSs.Add(pat);
		
		while (la.kind == 25) {
			Get();
			CasePattern(out pat);
			if (isGhost) { pat.Vars.Iter(bv => bv.IsGhost = true); }
			letLHSs.Add(pat);
			
		}
		if (la.kind == 28) {
			Get();
		} else if (la.kind == 29 || la.kind == 76) {
			while (la.kind == 76) {
				Attribute(ref attrs);
			}
			Expect(29);
			exact = false;
			foreach (var lhs in letLHSs) {
			 if (lhs.Arguments != null) {
			   SemErr(lhs.tok, "LHS of let-such-that expression must be variables, not general patterns");
			 }
			}
			
		} else if (la.kind == 118) {
			Get();
			isLetOrFail = true; 
		} else SynErr(301);
		Expression(out e, false, true);
		letRHSs.Add(e); 
		while (la.kind == 25) {
			Get();
			Expression(out e, false, true);
			letRHSs.Add(e); 
		}
		Expect(33);
		Expression(out e, allowLemma, allowLambda, allowBitwiseOps);
		if (isLetOrFail) {
		 CasePattern<BoundVar> lhs = null;
		 Contract.Assert(letLHSs.Count > 0);
		 if (letLHSs.Count == 1) {
		   lhs = letLHSs[0];
		 } else {
		   SemErr("':-' can have at most one left-hand side");
		 }
		 Expression rhs = null;
		 Contract.Assert(letRHSs.Count > 0);
		 if (letRHSs.Count == 1) {
		   rhs = letRHSs[0];
		 } else {
		   SemErr("':-' must have exactly one right-hand side");
		 }
		 e = new LetOrFailExpr(x, lhs, rhs, e);
		} else {
		 e = new LetExpr(x, letLHSs, letRHSs, e, exact, attrs);
		}
		
	}

	void LetExprWithoutLHS(out Expression e, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		IToken x;
		Expression rhs;
		Expression body;
		
		Expect(118);
		x = t; 
		Expression(out rhs, false, true);
		Expect(33);
		Expression(out body, allowLemma, allowLambda, allowBitwiseOps);
		e = new LetOrFailExpr(x, null, rhs, body); 
	}

	void CasePattern(out CasePattern<BoundVar> pat) {
		IToken id;  List<CasePattern<BoundVar>> arguments;
		BoundVar bv;
		pat = null;
		
		if (IsIdentParen()) {
			Ident(out id);
			Expect(81);
			arguments = new List<CasePattern<BoundVar>>(); 
			if (StartOf(27)) {
				CasePattern(out pat);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					CasePattern(out pat);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			pat = new CasePattern<BoundVar>(id, id.val, arguments); 
		} else if (la.kind == 81) {
			Get();
			id = t;
			arguments = new List<CasePattern<BoundVar>>();
			
			if (StartOf(27)) {
				CasePattern(out pat);
				arguments.Add(pat); 
				while (la.kind == 25) {
					Get();
					CasePattern(out pat);
					arguments.Add(pat); 
				}
			}
			Expect(82);
			string ctor = BuiltIns.TupleTypeCtorName(arguments.Count);  //use the TupleTypeCtors
			pat = new CasePattern<BoundVar>(id, ctor, arguments);
			
		} else if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			IdentTypeOptional(out bv);
			pat = new CasePattern<BoundVar>(bv.tok, bv);
			
		} else SynErr(302);
		if (pat == null) {
		 pat = new CasePattern<BoundVar>(t, "_ParseError", null);
		}
		
	}

	void CaseExpression(out NestedMatchCaseExpr c, bool allowLemma, bool allowLambda, bool allowBitwiseOps) {
		Contract.Ensures(Contract.ValueAtReturn(out c) != null); IToken/*!*/ x;
		ExtendedPattern/*!*/ pat = null;
		Expression/*!*/ body;
		Attributes attrs = null;
		
		Expect(38);
		x = t; 
		while (la.kind == 76) {
			Attribute(ref attrs);
		}
		ExtendedPattern(out pat);
		
		Expect(34);
		Expression(out body, allowLemma, allowLambda, allowBitwiseOps);
		c = new NestedMatchCaseExpr(x, pat, body, attrs); 
	}

	void AtCall(out IToken atLabel, out IToken openParen, out List<ActualBinding> args) {
		atLabel = null;
		openParen = null;
		args = new List<ActualBinding>();
		
		Expect(90);
		LabelName(out atLabel);
		Expect(81);
		openParen = t; 
		if (StartOf(4)) {
			ActualBindings(args);
		}
		Expect(82);
	}

	void HashCall(IToken id, out IToken openParen, out List<Type> typeArgs, out List<ActualBinding> args) {
		Expression k; args = new List<ActualBinding>(); typeArgs = null; 
		Expect(126);
		id.val = id.val + "#"; 
		if (la.kind == 83) {
			typeArgs = new List<Type>(); 
			GenericInstantiation(typeArgs);
		}
		Expect(79);
		Expression(out k, true, true);
		Expect(80);
		args.Add(new ActualBinding(null, k)); 
		Expect(81);
		openParen = t; 
		if (StartOf(4)) {
			ActualBindings(args);
		}
		Expect(82);
	}

	void MemberBindingUpdate(out IToken id, out Expression e) {
		id = Token.NoToken; e = dummyExpr; 
		NoUSIdentOrDigits(out id);
		Expect(28);
		Expression(out e, true, true);
	}

	void DotSuffix(out IToken x, out IToken y) {
		Contract.Ensures(Contract.ValueAtReturn(out x) != null);
		x = Token.NoToken;
		y = null;
		
		if (la.kind == 1 || la.kind == 49 || la.kind == 50) {
			Ident(out x);
		} else if (la.kind == 2) {
			Get();
			x = t; 
		} else if (la.kind == 4) {
			Get();
			x = t;
			int exponent = x.val.IndexOf('e');
			if (0 <= exponent) {
			 // this is not a legal field/destructor name
			 SemErr(x, "invalid DotSuffix");
			} else {
			 int dot = x.val.IndexOf('.');
			 if (0 <= dot) {
			   y = new Token();
			   y.pos = x.pos + dot + 1;
			   y.val = x.val.Substring(dot + 1);
			   x.val = x.val.Substring(0, dot);
			   y.col = x.col + dot + 1;
			   y.line = x.line;
			   y.filename = x.filename;
			   y.kind = x.kind;
			 }
			}
			
		} else if (la.kind == 72) {
			Get();
			x = t; 
		} else if (la.kind == 71) {
			Get();
			x = t; 
		} else SynErr(303);
	}

	void ActualBinding(out ActualBinding binding, bool isGhost = false) {
		IToken id = null; Expression e; 
		if (IsBinding()) {
			NoUSIdentOrDigits(out id);
			Expect(28);
		}
		Expression(out e, true, true);
		binding = new ActualBinding(id, e, isGhost); 
	}

	void AttributeName(out IToken id) {
		NoUSIdent(out id);
	}



  public void Parse() {
    la = new Token();
    la.val = "";
    Get();
		Dafny();
		Expect(0);

  }

  static readonly bool[,] set = {
		{_T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_T,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _x,_T,_T,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_T, _T,_T,_T,_x, _x,_T,_T,_x, _x,_T,_x,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _T,_T,_T,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_T, _T,_T,_T,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_T,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_T,_T,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_x,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_T,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_x,_x,_x},
		{_x,_x,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_x,_x,_x},
		{_x,_x,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _T,_T,_T,_T, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_T,_x,_T, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_x,_x, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_x,_T,_T,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x},
		{_T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_x,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_T, _x,_x,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x},
		{_T,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _T,_T,_T,_T, _T,_x,_T,_x, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _T,_T,_T,_T, _T,_x,_T,_T, _T,_T,_x,_T, _T,_T,_T,_x, _x,_x,_x,_T, _T,_T,_x,_x, _x,_x,_x,_T, _x,_x,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_x,_x,_x, _x,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_x,_x}

  };
} // end Parser


public class Errors {
  readonly ErrorReporter Reporting;
  public int ErrorCount;

  public Errors(ErrorReporter Reporting) {
    Contract.Requires(Reporting != null);
    this.Reporting = Reporting;
  }

  public void SynErr(string filename, int line, int col, int n) {
    SynErr(filename, line, col, GetSyntaxErrorString(n));
  }

  public void SynErr(string filename, int line, int col, string msg) {
    Contract.Requires(msg != null);
    ErrorCount++;
    Reporting.Error(MessageSource.Parser, filename, line, col, msg);
  }

  string GetSyntaxErrorString(int n) {
    string s;
    switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "ident expected"; break;
			case 2: s = "digits expected"; break;
			case 3: s = "hexdigits expected"; break;
			case 4: s = "decimaldigits expected"; break;
			case 5: s = "arrayToken expected"; break;
			case 6: s = "bvToken expected"; break;
			case 7: s = "bool expected"; break;
			case 8: s = "char expected"; break;
			case 9: s = "int expected"; break;
			case 10: s = "nat expected"; break;
			case 11: s = "real expected"; break;
			case 12: s = "ORDINAL expected"; break;
			case 13: s = "object expected"; break;
			case 14: s = "object_q expected"; break;
			case 15: s = "string expected"; break;
			case 16: s = "set expected"; break;
			case 17: s = "iset expected"; break;
			case 18: s = "multiset expected"; break;
			case 19: s = "seq expected"; break;
			case 20: s = "map expected"; break;
			case 21: s = "imap expected"; break;
			case 22: s = "charToken expected"; break;
			case 23: s = "stringToken expected"; break;
			case 24: s = "colon expected"; break;
			case 25: s = "comma expected"; break;
			case 26: s = "verticalbar expected"; break;
			case 27: s = "doublecolon expected"; break;
			case 28: s = "gets expected"; break;
			case 29: s = "boredSmiley expected"; break;
			case 30: s = "bullet expected"; break;
			case 31: s = "dot expected"; break;
			case 32: s = "backtick expected"; break;
			case 33: s = "semicolon expected"; break;
			case 34: s = "darrow expected"; break;
			case 35: s = "assume expected"; break;
			case 36: s = "assert expected"; break;
			case 37: s = "calc expected"; break;
			case 38: s = "case expected"; break;
			case 39: s = "then expected"; break;
			case 40: s = "else expected"; break;
			case 41: s = "as expected"; break;
			case 42: s = "is expected"; break;
			case 43: s = "by expected"; break;
			case 44: s = "in expected"; break;
			case 45: s = "decreases expected"; break;
			case 46: s = "invariant expected"; break;
			case 47: s = "function expected"; break;
			case 48: s = "predicate expected"; break;
			case 49: s = "least expected"; break;
			case 50: s = "greatest expected"; break;
			case 51: s = "inductive expected"; break;
			case 52: s = "twostate expected"; break;
			case 53: s = "copredicate expected"; break;
			case 54: s = "lemma expected"; break;
			case 55: s = "static expected"; break;
			case 56: s = "import expected"; break;
			case 57: s = "export expected"; break;
			case 58: s = "class expected"; break;
			case 59: s = "trait expected"; break;
			case 60: s = "datatype expected"; break;
			case 61: s = "codatatype expected"; break;
			case 62: s = "var expected"; break;
			case 63: s = "const expected"; break;
			case 64: s = "newtype expected"; break;
			case 65: s = "type expected"; break;
			case 66: s = "iterator expected"; break;
			case 67: s = "method expected"; break;
			case 68: s = "colemma expected"; break;
			case 69: s = "constructor expected"; break;
			case 70: s = "modifies expected"; break;
			case 71: s = "reads expected"; break;
			case 72: s = "requires expected"; break;
			case 73: s = "ensures expected"; break;
			case 74: s = "ghost expected"; break;
			case 75: s = "witness expected"; break;
			case 76: s = "lbracecolon expected"; break;
			case 77: s = "lbrace expected"; break;
			case 78: s = "rbrace expected"; break;
			case 79: s = "lbracket expected"; break;
			case 80: s = "rbracket expected"; break;
			case 81: s = "openparen expected"; break;
			case 82: s = "closeparen expected"; break;
			case 83: s = "openAngleBracket expected"; break;
			case 84: s = "closeAngleBracket expected"; break;
			case 85: s = "singleeq expected"; break;
			case 86: s = "eq expected"; break;
			case 87: s = "neq expected"; break;
			case 88: s = "neqAlt expected"; break;
			case 89: s = "star expected"; break;
			case 90: s = "at expected"; break;
			case 91: s = "notIn expected"; break;
			case 92: s = "ellipsis expected"; break;
			case 93: s = "reveal expected"; break;
			case 94: s = "expect expected"; break;
			case 95: s = "sarrow expected"; break;
			case 96: s = "qarrow expected"; break;
			case 97: s = "larrow expected"; break;
			case 98: s = "\"include\" expected"; break;
			case 99: s = "\"abstract\" expected"; break;
			case 100: s = "\"protected\" expected"; break;
			case 101: s = "\"module\" expected"; break;
			case 102: s = "\"refines\" expected"; break;
			case 103: s = "\"opened\" expected"; break;
			case 104: s = "\"provides\" expected"; break;
			case 105: s = "\"reveals\" expected"; break;
			case 106: s = "\"extends\" expected"; break;
			case 107: s = "\"new\" expected"; break;
			case 108: s = "\"nameonly\" expected"; break;
			case 109: s = "\"yields\" expected"; break;
			case 110: s = "\"returns\" expected"; break;
			case 111: s = "\"+\" expected"; break;
			case 112: s = "\"!\" expected"; break;
			case 113: s = "\"-\" expected"; break;
			case 114: s = "\"yield\" expected"; break;
			case 115: s = "\"label\" expected"; break;
			case 116: s = "\"break\" expected"; break;
			case 117: s = "\"return\" expected"; break;
			case 118: s = "\":-\" expected"; break;
			case 119: s = "\"if\" expected"; break;
			case 120: s = "\"while\" expected"; break;
			case 121: s = "\"for\" expected"; break;
			case 122: s = "\"match\" expected"; break;
			case 123: s = "\"print\" expected"; break;
			case 124: s = "\"forall\" expected"; break;
			case 125: s = "\"modify\" expected"; break;
			case 126: s = "\"#\" expected"; break;
			case 127: s = "\"<=\" expected"; break;
			case 128: s = "\">=\" expected"; break;
			case 129: s = "\"\\u2264\" expected"; break;
			case 130: s = "\"\\u2265\" expected"; break;
			case 131: s = "\"<==>\" expected"; break;
			case 132: s = "\"\\u21d4\" expected"; break;
			case 133: s = "\"==>\" expected"; break;
			case 134: s = "\"\\u21d2\" expected"; break;
			case 135: s = "\"<==\" expected"; break;
			case 136: s = "\"\\u21d0\" expected"; break;
			case 137: s = "\"&&\" expected"; break;
			case 138: s = "\"\\u2227\" expected"; break;
			case 139: s = "\"||\" expected"; break;
			case 140: s = "\"\\u2228\" expected"; break;
			case 141: s = "\"\\u00ac\" expected"; break;
			case 142: s = "\"\\u2200\" expected"; break;
			case 143: s = "\"exists\" expected"; break;
			case 144: s = "\"\\u2203\" expected"; break;
			case 145: s = "\"/\" expected"; break;
			case 146: s = "\"%\" expected"; break;
			case 147: s = "\"&\" expected"; break;
			case 148: s = "\"^\" expected"; break;
			case 149: s = "\"this\" expected"; break;
			case 150: s = "\"allocated\" expected"; break;
			case 151: s = "\"fresh\" expected"; break;
			case 152: s = "\"unchanged\" expected"; break;
			case 153: s = "\"old\" expected"; break;
			case 154: s = "\"false\" expected"; break;
			case 155: s = "\"true\" expected"; break;
			case 156: s = "\"null\" expected"; break;
			case 157: s = "\"..\" expected"; break;
			case 158: s = "??? expected"; break;
			case 159: s = "this symbol not expected in Dafny"; break;
			case 160: s = "invalid TopDecl"; break;
			case 161: s = "invalid DeclModifier"; break;
			case 162: s = "invalid SubModuleDecl"; break;
			case 163: s = "this symbol not expected in ClassDecl"; break;
			case 164: s = "this symbol not expected in ClassDecl"; break;
			case 165: s = "this symbol not expected in DatatypeDecl"; break;
			case 166: s = "invalid DatatypeDecl"; break;
			case 167: s = "invalid NewtypeDecl"; break;
			case 168: s = "invalid NewtypeDecl"; break;
			case 169: s = "invalid NewtypeDecl"; break;
			case 170: s = "invalid SynonymTypeDecl"; break;
			case 171: s = "invalid SynonymTypeDecl"; break;
			case 172: s = "invalid SynonymTypeDecl"; break;
			case 173: s = "this symbol not expected in IteratorDecl"; break;
			case 174: s = "invalid IteratorDecl"; break;
			case 175: s = "this symbol not expected in TraitDecl"; break;
			case 176: s = "invalid ClassMemberDecl"; break;
			case 177: s = "this symbol not expected in ModuleDefinition"; break;
			case 178: s = "invalid ModuleImport"; break;
			case 179: s = "invalid ModuleExport"; break;
			case 180: s = "invalid ModuleExport"; break;
			case 181: s = "invalid Ident"; break;
			case 182: s = "invalid NoUSIdentOrDigits"; break;
			case 183: s = "invalid ModuleExportSuffix"; break;
			case 184: s = "this symbol not expected in FieldDecl"; break;
			case 185: s = "this symbol not expected in ConstantFieldDecl"; break;
			case 186: s = "invalid FunctionDecl"; break;
			case 187: s = "invalid FunctionDecl"; break;
			case 188: s = "invalid FunctionDecl"; break;
			case 189: s = "invalid FunctionDecl"; break;
			case 190: s = "invalid FunctionDecl"; break;
			case 191: s = "invalid FunctionDecl"; break;
			case 192: s = "this symbol not expected in MethodDecl"; break;
			case 193: s = "invalid MethodDecl"; break;
			case 194: s = "invalid MethodDecl"; break;
			case 195: s = "this symbol not expected in OldSemi"; break;
			case 196: s = "invalid TypeIdentOptional"; break;
			case 197: s = "invalid TypeAndToken"; break;
			case 198: s = "this symbol not expected in IteratorSpec"; break;
			case 199: s = "invalid IteratorSpec"; break;
			case 200: s = "invalid Variance"; break;
			case 201: s = "invalid TPCharOption"; break;
			case 202: s = "invalid KType"; break;
			case 203: s = "this symbol not expected in MethodSpec"; break;
			case 204: s = "invalid FrameExpression"; break;
			case 205: s = "invalid PossiblyWildFrameExpression"; break;
			case 206: s = "this symbol not expected in FunctionSpec"; break;
			case 207: s = "invalid PossiblyWildExpression"; break;
			case 208: s = "invalid IdentOrDigits"; break;
			case 209: s = "this symbol not expected in OneStmt"; break;
			case 210: s = "invalid OneStmt"; break;
			case 211: s = "invalid UpdateStmt"; break;
			case 212: s = "invalid UpdateStmt"; break;
			case 213: s = "invalid UpdateStmt"; break;
			case 214: s = "invalid UpdateStmt"; break;
			case 215: s = "invalid UpdateStmt"; break;
			case 216: s = "invalid VarDeclStatement"; break;
			case 217: s = "this symbol not expected in VarDeclStatement"; break;
			case 218: s = "invalid VarDeclStatement"; break;
			case 219: s = "invalid VarDeclStatement"; break;
			case 220: s = "invalid IfStmt"; break;
			case 221: s = "invalid IfStmt"; break;
			case 222: s = "invalid WhileStmt"; break;
			case 223: s = "invalid WhileStmt"; break;
			case 224: s = "invalid ForLoopStmt"; break;
			case 225: s = "invalid ForLoopStmt"; break;
			case 226: s = "invalid AssertStmt"; break;
			case 227: s = "invalid AssertStmt"; break;
			case 228: s = "invalid AssumeStmt"; break;
			case 229: s = "invalid BreakStmt"; break;
			case 230: s = "this symbol not expected in BreakStmt"; break;
			case 231: s = "invalid CalcStmt"; break;
			case 232: s = "invalid ExpectStmt"; break;
			case 233: s = "invalid ForallStmt"; break;
			case 234: s = "invalid MatchStmt"; break;
			case 235: s = "invalid ModifyStmt"; break;
			case 236: s = "this symbol not expected in ModifyStmt"; break;
			case 237: s = "invalid ModifyStmt"; break;
			case 238: s = "invalid Rhs"; break;
			case 239: s = "invalid Rhs"; break;
			case 240: s = "invalid Lhs"; break;
			case 241: s = "invalid NewArray"; break;
			case 242: s = "invalid CasePatternLocal"; break;
			case 243: s = "invalid AlternativeBlock"; break;
			case 244: s = "invalid Guard"; break;
			case 245: s = "invalid AlternativeBlockCase"; break;
			case 246: s = "this symbol not expected in AlternativeBlockCase"; break;
			case 247: s = "this symbol not expected in AlternativeBlockCase"; break;
			case 248: s = "this symbol not expected in LoopSpec"; break;
			case 249: s = "this symbol not expected in LoopSpec"; break;
			case 250: s = "this symbol not expected in LoopSpec"; break;
			case 251: s = "invalid ExtendedPattern"; break;
			case 252: s = "invalid PossiblyNegatedLiteralExpr"; break;
			case 253: s = "invalid PossiblyNegatedLiteralExpr"; break;
			case 254: s = "this symbol not expected in CaseStmt"; break;
			case 255: s = "this symbol not expected in CaseStmt"; break;
			case 256: s = "invalid CalcOp"; break;
			case 257: s = "invalid EquivOp"; break;
			case 258: s = "invalid ImpliesOp"; break;
			case 259: s = "invalid ExpliesOp"; break;
			case 260: s = "invalid AndOp"; break;
			case 261: s = "invalid OrOp"; break;
			case 262: s = "invalid NegOp"; break;
			case 263: s = "invalid Forall"; break;
			case 264: s = "invalid Exists"; break;
			case 265: s = "invalid QSep"; break;
			case 266: s = "invalid ImpliesExpliesExpression"; break;
			case 267: s = "invalid LogicalExpression"; break;
			case 268: s = "invalid LogicalExpression"; break;
			case 269: s = "invalid ShiftTerm"; break;
			case 270: s = "invalid RelOp"; break;
			case 271: s = "invalid AddOp"; break;
			case 272: s = "invalid BitvectorFactor"; break;
			case 273: s = "invalid BitvectorFactor"; break;
			case 274: s = "invalid BitvectorFactor"; break;
			case 275: s = "invalid BitvectorFactor"; break;
			case 276: s = "invalid MulOp"; break;
			case 277: s = "invalid AsExpression"; break;
			case 278: s = "invalid UnaryExpression"; break;
			case 279: s = "invalid PrimaryExpression"; break;
			case 280: s = "invalid MapDisplayExpr"; break;
			case 281: s = "invalid Suffix"; break;
			case 282: s = "invalid Suffix"; break;
			case 283: s = "invalid Suffix"; break;
			case 284: s = "invalid Suffix"; break;
			case 285: s = "invalid Suffix"; break;
			case 286: s = "invalid SetDisplayExpr"; break;
			case 287: s = "invalid LambdaExpression"; break;
			case 288: s = "invalid EndlessExpression"; break;
			case 289: s = "invalid NameSegment"; break;
			case 290: s = "invalid SeqDisplayExpr"; break;
			case 291: s = "invalid ConstAtomExpression"; break;
			case 292: s = "invalid LiteralExpression"; break;
			case 293: s = "invalid Nat"; break;
			case 294: s = "invalid MapComprehensionExpr"; break;
			case 295: s = "invalid IfExpression"; break;
			case 296: s = "invalid MatchExpression"; break;
			case 297: s = "invalid QuantifierExpression"; break;
			case 298: s = "invalid SetComprehensionExpr"; break;
			case 299: s = "invalid StmtInExpr"; break;
			case 300: s = "invalid LetExpression"; break;
			case 301: s = "invalid LetExprWithLHS"; break;
			case 302: s = "invalid CasePattern"; break;
			case 303: s = "invalid DotSuffix"; break;

      default: s = "error " + n; break;
    }
    return s;
  }

  public void SemErr(IToken tok, string msg) {  // semantic errors
    Contract.Requires(tok != null);
    Contract.Requires(msg != null);
    ErrorCount++;
    Reporting.Error(MessageSource.Parser, tok, msg);
  }

  public void SemErr(string filename, int line, int col, string msg) {
    Contract.Requires(msg != null);
    ErrorCount++;
    Reporting.Error(MessageSource.Parser, filename, line, col, msg);
  }

  public void Deprecated(IToken tok, string msg) {
    Contract.Requires(tok != null);
    Contract.Requires(msg != null);
    Reporting.Deprecated(MessageSource.Parser, tok, msg);
  }

  public void DeprecatedStyle(IToken tok, string msg) {
    Contract.Requires(tok != null);
    Contract.Requires(msg != null);
    Reporting.DeprecatedStyle(MessageSource.Parser, tok, msg);
  }

  public void Warning(IToken tok, string msg) {
    Contract.Requires(tok != null);
    Contract.Requires(msg != null);
    Reporting.Warning(MessageSource.Parser, tok, msg);
  }
} // Errors


public class FatalError: Exception {
  public FatalError(string m): base(m) {}
}
}